/*
CREATE PROCEDURE SAVETRAN_SLS_AFTERSAVE
(
	@NUPDATEMODE NUMERIC(1,0),
	@NSPID VARCHAR(40),
	@CMEMONOPREFIX VARCHAR(50),
	@CFINYEAR VARCHAR(10),
	@CMACHINENAME VARCHAR(100)='',
	@CWINDOWUSERNAME VARCHAR(100)='',
	@CWIZAPPUSERCODE VARCHAR(10)='0000000',
	@CMEMOID VARCHAR(40)='',
	@CMEMODT DATETIME = '',
	@BCALLEDFROMESTIMATE        BIT=0,
	@BCALLEDFROMCASHIERMODULE BIT = 0,
	@CLOCID                     VARCHAR(2)='',
	@BDIALOGRESULT BIT = 0,
	@BCALLEDFROMSLSSTOCKNACONVERT BIT=0,
	@BSISLOC BIT = 0,
	@NLOGINSPID varchar(40)='',
	@bcheckcreditlimit bit = 0,
	@bCalledFromBulkImport BIT=0
)
AS
BEGIN
SET NOCOUNT ON
	-- @NUPDATEMODE:	1- NEW RETAIL SALE ADDED,
	--					2- EDIT CURRENT BILL, 
	--					3- CURRENT RETAIL SALE CANCELLED,
	--					4- CALLED FROM CTRL+F8(DATE CHANGE OF BILL)
	--					5- CALLED FROM PAYMENT MODE DIRECT EDIT W/O BILL EDIT


LBLSTART:	




				
	-- @CMEMOID:		MEMOID IS REQUIRED IF @NUPDATEMODE IS 3 (FROM CANCELLATION)
	DECLARE @CTEMPDBNAME VARCHAR(100),
			@CMASTERTABLENAME VARCHAR(100),
			@CDETAILTABLENAME VARCHAR(100),
			@CDETAILTABLENAME2 VARCHAR(100),
			@CDETAILTABLENAME3 VARCHAR(100),
			@CDETAILTABLENAME4 VARCHAR(100),
			@CDETAILTABLENAME5 VARCHAR(100),
			@CTEMPMASTERTABLENAME VARCHAR(100),
			@CTEMPDETAILTABLENAME VARCHAR(100),
			@CTEMPDETAILTABLENAME2 VARCHAR(100),
			@CTEMPDETAILTABLENAME3 VARCHAR(100),
			@CTEMPDETAILTABLENAME4 VARCHAR(100),
			@CTEMPDETAILTABLENAME5 VARCHAR(100),
			@CTEMPDETAILTABLENAME6 VARCHAR(100),
			@CTEMPDETAILTABLENAME7 VARCHAR(100),
			@CTEMPDETAILTABLENAME9 VARCHAR(100),
			@CTEMPDETAILTABLENAME10 VARCHAR(100),
			@CTEMPDETAILTABLENAME11 VARCHAR(100),
			@CTEMPMASTERTABLE VARCHAR(100),
			@CTEMPDETAILTABLE VARCHAR(100),
			@CTEMPDETAILTABLE2 VARCHAR(100),
			@CTEMPDETAILTABLE3 VARCHAR(100),
			@CTEMPDETAILTABLE4 VARCHAR(100),
			@CTEMPDETAILTABLE6 VARCHAR(100),
			@CTEMPDETAILTABLE7 VARCHAR(100),			
			@CTEMPDETAILTABLE8 VARCHAR(100),
			@CTEMPDETAILTABLE9 VARCHAR(100),
			@CTEMPDETAILTABLE10 VARCHAR(100),
			@CTEMPDETAILTABLE11 VARCHAR(100),
			@CERRORMSG VARCHAR(MAX),
			@LDONOTUPDATESTOCK BIT,
			@CKEYFIELD1             VARCHAR(50),
			@CKEYFIELDVAL1 VARCHAR(50),
			@CKEYFIELD1_DETAIL2 VARCHAR(50),
			@CMEMONO VARCHAR(20),
			@NMEMONOLEN NUMERIC(20,0),
			@CMEMONOVAL VARCHAR(50),
			@CLOCATIONID VARCHAR(2),
			@CHODEPTID VARCHAR(2),
			@CCMD NVARCHAR(4000),
			@CCMDOUTPUT NVARCHAR(4000),
			@NSAVETRANLOOP BIT, @cPartyGstno VARCHAR(100),
			@CREFAPPMEMOID VARCHAR(40),
			@CAPRMEMOID VARCHAR(40),
			@cStep varchar(10),@CCUSTCODE CHAR(12),
			@BINSERTONLY BIT,
			@BNEGSTOCKFOUND BIT,
			@CKEYSTABLE VARCHAR(100),
			@CUSERALIAS VARCHAR(100),
			@BESTIMATEMEMO NUMERIC(1),
			@CDEPT_ID CHAR(2),
			@BALLOWNEGSTOCK BIT,
			@CMEMONOLEN VARCHAR(5),
			@CDONOTENFORCEDAYCLOSE VARCHAR(2),
			@BINSERTONLYCMD BIT,
			@CCMMUSERCODE CHAR(7),
			@DCMDT DATETIME,
			@NCMMDISCAMT NUMERIC(10,2),
			@CTAXDIFFPC VARCHAR(50),
			@NCMDTAXAMT NUMERIC(10,2),
			@NCALCTAXAMT NUMERIC(10,2),
			@BMANUALBILL BIT, @CTEXT VARCHAR(500),@CDTCODE CHAR(7),
			@DSTARTTIME DATETIME, @BAPPRETFOUND BIT,
			@CTMPTABLEFINYEAR VARCHAR(10),@BSLRRECONREQD BIT, @DSLRRECONCUTOFFDATE DATETIME,
			@CWHERECLAUSE VARCHAR(500),@CWHERECLAUSE1 VARCHAR(500),@CWHERECLAUSE2 VARCHAR(500),
			@BDEBUGMODE BIT, @CDEBUGMODE VARCHAR(2),@NNETAMOUNT NUMERIC(14,2),@NPAYMODECRAMT NUMERIC(14,2),
			@NPAYMODETOTAMT NUMERIC(14,2),@NINVMODE INT, @NINVTYPE INT,@CSTRSTUFF VARCHAR(5),
			@CDONOTRESETPOSTEDINAC VARCHAR(4),@CPOSTINGATHODEPTID VARCHAR(5),@NINVALIDGVAMOUNT NUMERIC(10,2),
			@NCMMSUBTOTAL NUMERIC(10,2),@NCMDSUBTOTAL NUMERIC(10,2),
			@CONLINE_REDEMPTIONS_CN VARCHAR(5),@CONLINE_CN VARCHAR(5),@CHOLOCATIONID VARCHAR(2),
			@CGSTCUTOFFDATE VARCHAR(12),@DGSTDATE DATETIME, @BGSTBILL BIT,@CPARTYCODE CHAR(12),
			@NMEMO_TYPE INT, @bcalldfromnormalize  bit,@bENABLEWIZCLIP BIT, @bCallRedemptionAPI bit,@cEcouponIdchanged VARCHAR(50),
			@bGenHoldBackMemo BIT, @cMissingRowId VARCHAR(40),@dTLastUpdate DATETIME, @bServerLoc BIT,
			@LUPDATEONLY BIT, @cUpdatestr VARCHAR(3500),@DXNDT datetime, @bValidateGvThruWizclip BIT,
			@bValidateGvThruHO BIT, @bValidategvLocal BIT,@bValidationGvLocalFailed BIT,
			 @cGenerateMonthwiseNo VARCHAR(2),@cBaseMemoPrefix VARCHAR(10)


			DECLARE @NCREDIT_LIMIT NUMERIC(10,2),@NCUSTBAL NUMERIC(14,2),@NBILLBALANCE NUMERIC(10,2),@NFINALBALANCE NUMERIC(14,2),
		        @CCUSTOMERCODE VARCHAR(25),@BCREDITLIMITCROSSED BIT

			SET @BCREDITLIMITCROSSED = 0


	SET @cStep = 1
	SELECT @bValidateGvThruWizclip = 0, @bValidateGvThruHO = 0, @bValidategvLocal = 0, @bValidationGvLocalFailed = 0

	IF @NUPDATEMODE<>1
	BEGIN
		IF @NUPDATEMODE= 2
			SELECT TOP 1 @cMemoId= cm_id FROM sls_cmm01106_UPLOAD (NOLOCK) WHERE sp_id= @nSpId


	END

	SELECT @CHODEPTID       = [VALUE] FROM CONFIG (NOLOCK) WHERE  CONFIG_OPTION= 'HO_LOCATION_ID'
	IF @NUPDATEMODE IN (4)
		BEGIN TRAN

	IF @NUPDATEMODE IN(1,2,5)
	BEGIN

		IF @NUPDATEMODE IN(1,2)
		BEGIN
			SET @cStep = 2.5
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,1, @nSpId,'',1	 


			EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=@NUPDATEMODE,
			@cXnType='SLS',
			@nSpId=@nSpId,
			@cMasterTable='cmm01106',
			@cMemoIdCol='cm_id',
			@cXnDtCol='cm_dt',
			@cUploadTableNamePara='sls_cmm01106_upload',
			@CERRORMSG=@CERRORMSG OUTPUT


			IF ISNULL(@cErrormsg,'')<>''
				GOTO END_PROC
		END

		SET @cStep = 3.2
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,1, @nSpId,'',1	 
		IF @NUPDATEMODE = 5
			SELECT @CKEYFIELDVAL1 = memo_id FROM SLS_paymode_xn_det_UPLOAD(NOLOCK) WHERE sp_id = @nSpId
		ELSE
			SELECT @CKEYFIELDVAL1 = cm_id,@DCMDT=CM_DT FROM SLS_CMM01106_UPLOAD(NOLOCK) WHERE sp_id = @nSpId


		IF(@CKEYFIELDVAL1 IS NULL )
		BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@cStep)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				GOTO END_PROC
		END
	END


	IF @NUPDATEMODE IN(2,5)
	BEGIN
		SET @cStep = 3.5
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,1, @nSpId,'',1	 

		DECLARE @COL VARCHAR(MAX)
		SELECT TOP 1 @cMemoId=cm_id FROM SLS_cmm01106_UPLOAD(NOLOCK) WHERE sp_id = @nSpId

		SET @COL = 'IF OBJECT_ID(''TEMPDB..[##CMM_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+']'',''U'') IS NOT NULL'+CHAR(13)+' DROP TABLE [##CMM_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+'];'+CHAR(13)+'SELECT CM_ID OLD_CM_ID,CM_ID NEW_CM_ID,'
		SELECT @COL = COALESCE(@COL, '') + FIELD_NAME + ' OLD_' + FIELD_NAME + ',' + FIELD_NAME + ' NEW_' + FIELD_NAME + ',' FROM XN_AUDIT_TRIAL_MST(NOLOCK) WHERE TABLE_NAME = 'CMM01106' AND TRIG = 'UPDATE' ORDER BY ORDER_ID
							  SET @COL=LEFT(@COL, LEN(@COL)-1)+CHAR(13)+'INTO [##CMM_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+']'+CHAR(13)+'FROM CMM01106 (NOLOCK) WHERE CM_ID='''+@CMEMOID+''';'
		PRINT @COL
		EXEC(@COL)
		SET @COL = ''
		SET @COL = 'IF OBJECT_ID(''TEMPDB..[##CMD_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+']'',''U'') IS NOT NULL'+CHAR(13)+' DROP TABLE [##CMD_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+'];'+CHAR(13)+'SELECT CM_ID OLD_CM_ID,CM_ID NEW_CM_ID,'
		SELECT @COL = COALESCE(@COL, '') + FIELD_NAME + ' OLD_' + FIELD_NAME + ',' + FIELD_NAME + ' NEW_' + FIELD_NAME + ',' FROM XN_AUDIT_TRIAL_MST(NOLOCK) WHERE TABLE_NAME = 'CMD01106' AND TRIG = 'UPDATE' ORDER BY ORDER_ID
							  SET @COL=LEFT(@COL, LEN(@COL)-1)+CHAR(13)+'INTO [##CMD_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+']'+CHAR(13)+'FROM CMD01106 (NOLOCK) WHERE CM_ID='''+@CMEMOID+''';'
		PRINT @COL
		EXEC(@COL)

		SET @COL = ''
		SET @COL = 'IF OBJECT_ID(''TEMPDB..[##PAYMODE_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+']'',''U'') IS NOT NULL'+CHAR(13)+' DROP TABLE [##PAYMODE_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+'];'+CHAR(13)
		+'SELECT MEMO_ID OLD_MEMO_ID,MEMO_ID NEW_MEMO_ID,'  
		SELECT @COL = COALESCE(@COL, '') + FIELD_NAME + ' OLD_' + FIELD_NAME + ',' + FIELD_NAME + ' NEW_' + FIELD_NAME + ',' FROM XN_AUDIT_TRIAL_MST(NOLOCK) WHERE TABLE_NAME = 'PAYMODE_XN_DET' AND TRIG = 'UPDATE' ORDER BY ORDER_ID
							  SET @COL=LEFT(@COL, LEN(@COL)-1)+CHAR(13)+'INTO [##PAYMODE_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+']'+CHAR(13)+'FROM PAYMODE_XN_DET A 
		JOIN PAYMODE_MST B(NOLOCK) ON A.PAYMODE_CODE=B.PAYMODE_CODE WHERE XN_TYPE= ''SLS'' AND MEMO_ID = '''+@CMEMOID+''';'  
		PRINT @COL
		EXEC(@COL)

	END

	SELECT TOP 1 @CDEBUGMODE=VALUE FROM CONFIG(NOLOCK) WHERE CONFIG_OPTION = 'SLS_DEBUG_MODE'


	SET @BDEBUGMODE = (CASE WHEN ISNULL(@CDEBUGMODE,'')='1' THEN 1 ELSE 0 END)
	
	SET @cStep = 5-- DO VALIDATIONS ON INPUT DATA BY USER
IF @NUPDATEMODE IN(1,2)
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
	ELSE
		EXEC SP_CHKXNSAVELOG 'SLS_after',@cStep,1,@NSPID,1
	
	SET @DSTARTTIME = GETDATE()
	DECLARE @CRETVAL VARCHAR(MAX)
	DECLARE @OUTPUT TABLE(ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
	
	SET @CREFAPPMEMOID = ''


	SET @cStep = 7-- SETTTING UP ENVIRONMENT
EXEC SP_CHKXNSAVELOG 'SLS_after',@cStep,0,@NSPID,1
	
	-- CHECK TEMPORARY DATABASE TO HOLD TEMP TABLES 
	-- IF CONFIG SETTING SAYS TO DO SO
	SET @CTEMPDBNAME = ''
			
	SET @CMASTERTABLENAME = 'CMM01106'
	SET @CDETAILTABLENAME = 'CMD01106'
	SET @CDETAILTABLENAME2 = 'PAYMODE_XN_DET'
	SET @CDETAILTABLENAME4 = 'PACK_SLIP_REF'
	SET @CDETAILTABLENAME5 = 'IMAGE_XN_DET'

	SET @CTEMPMASTERTABLENAME = 'SLS_CMM01106_UPLOAD'
	SET @CTEMPDETAILTABLENAME = 'SLS_CMD01106_UPLOAD'
	SET @CTEMPDETAILTABLENAME2 = 'SLS_PAYMODE_XN_DET_UPLOAD'
	SET @CTEMPDETAILTABLENAME6 = 'SLS_PACK_SLIP_REF_UPLOAD'
	SET @CTEMPDETAILTABLENAME7 = 'SLS_IMAGE_XN_DET_UPLOAD'
	SET @CTEMPDETAILTABLENAME9 = 'SLS_CMM_FLIGHT_UPLOAD'
	SET @CTEMPDETAILTABLENAME10 = 'SLS_COUPON_REDEMPTION_INFO_UPLOAD'
	SET @CTEMPDETAILTABLENAME11 = 'SLS_GV_MST_REDEMPTION_UPLOAD'


	SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE = @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	SET @CTEMPDETAILTABLE2 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
	SET @CTEMPDETAILTABLE6 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME6
	SET @CTEMPDETAILTABLE8 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME7
	SET @CTEMPDETAILTABLE7 = @CTEMPDBNAME + 'SLS_APM01106_REF_UPLOAD'
	SET @CTEMPDETAILTABLE9 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME9
	SET @CTEMPDETAILTABLE10 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME10
	SET @CTEMPDETAILTABLE11 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME11


	SET @CERRORMSG = ''
	SET @LDONOTUPDATESTOCK = 0
	SET @CKEYFIELD1 = 'CM_ID'

	SET @CKEYFIELD1_DETAIL2 = 'MEMO_ID'

	SET @CMEMONO = 'CM_NO'
	SET @NMEMONOLEN = 10


	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID = DEPT_ID FROM NEW_APP_LOGIN_INFO(nolock) WHERE SPID =@@SPID
	ELSE
		SELECT @CLOCATIONID = @CLOCID


	SELECT @CHOLOCATIONID =[VALUE] FROM CONFIG(NOLOCK) WHERE CONFIG_OPTION = 'HO_LOCATION_ID'


BEGIN TRY

//STEP 1

	SELECT TOP 1 @bENABLEWIZCLIP=isnull(wizclip,0),@BSISLOC=ISNULL(sis_loc,0)
	FROM location where dept_id = @cLocationId

	IF @bCalledFromBulkImport = 1
		SET @bSisLoc = 1


	SELECT @CWHERECLAUSE = ' SP_ID='''+LTRIM(RTRIM((@NSPID)))+'''',
		   @CWHERECLAUSE1 = ' WHERE SP_ID='''+LTRIM(RTRIM((@NSPID)))+'''',
		   @CWHERECLAUSE2 = ' AND SP_ID='''+LTRIM(RTRIM((@NSPID)))+''''

	DECLARE @BTILL_ENABLED BIT
	SELECT @BTILL_ENABLED=ISNULL(TILL_ENABLED,0),@bServerLoc=isnull(server_loc,0),
	@BSLRRECONREQD=ISNULL(SLR_RECON_REQD,0) FROM LOCATION WHERE DEPT_ID = @CLOCATIONID


	IF ISNULL(@CLOCATIONID,'')='' AND @nUpdatemode IN(1,2)
	 BEGIN
		SET @CERRORMSG =' LOCATION ID CAN NOT BE BLANK  '  
		GOTO END_PROC
	 END
//STEP 1 : END
//STEP 2 : START 
	IF @NUPDATEMODE IN(1,2)
	BEGIN
		 SET @cStep=7.2
	        
		 IF EXISTS(SELECT TOP 1 memo_id FROM sls_paymode_xn_det_upload a (NOLOCK)
					WHERE sp_id= @nSpId AND paymode_code = 'GVC0001'
					AND LEFT(a.gv_srno,2)='WC' AND amount<>0)
			SET @bValidateGvThruWizclip = 1


		 IF EXISTS(SELECT TOP 1 memo_id FROM sls_paymode_xn_det_upload a (NOLOCK)
					WHERE sp_id= @nSpId AND paymode_code = 'GVC0001'
					AND LEFT(a.gv_srno,2)<>'WC' AND amount<>0)
			SET @bValidateGvThruHO = 1

		IF @bValidateGvThruHO = 1 AND @bValidateGvThruWizclip = 1
		BEGIN
			SET @cErrormsg='Wizclip and Non-Wizcllip Gv(s) cannot be Redeemed in One Memo..'
			GOTO END_PROC
		END

		IF @bENABLEWIZCLIP=0 AND @bValidateGvThruWizclip = 1
		BEGIN
			SET @cErrormsg='Wizclip Gv(s) cannot be Redeemed as Wizclip is not Enabled..'
			GOTO END_PROC
		END

		IF @bValidateGvThruHO=1 
		BEGIN
			SET @cSTEP = 7.4
			EXEC SP_CHKXNSAVELOG 'SLS_after', @CStep,1, @nSpId,'',1	 		
			IF EXISTS(SELECT dept_id FROM location (NOLOCK) WHERE dept_id= @CLOCATIONID AND
						(dept_id= @CHODEPTID OR isnull(server_loc,0)=1))
			BEGIN
				SET @CSTEP = '7.4.2'
				EXEC SP_CHKXNSAVELOG 'SLS_after', @CStep,1, @nSpId,'',1	 		 		
				SET @bValidategvLocal = 1

				SET @bValidateGvThruHO = 0
				 INSERT validate_sls_gvredemption_upload(sp_id, gv_adj_amount, GV_SCRATCH_NO, GV_SRNO, CM_ID, denomination,
				 redemption_customer_code  )
				 SELECT a.sp_id, a.amount as gv_amount, b.GV_SCRATCH_NO, a.GV_SRNO, a.memo_id, a.amount gv_amount, d.customer_code
				 FROM  SLS_PAYMODE_XN_DET_UPLOAD A (NOLOCK)
				 JOIN gv_mst_info b (NOLOCK) ON a.gv_srno= b.gv_srno
				 JOIN sku_gv_mst c (NOLOCK) ON a.gv_srno= c.gv_srno
				 JOIN sls_cmm01106_upload d (NOLOCK) ON d.sp_id= a.sp_id
				 WHERE a.sp_id= @nSpId

				SET @cSTEP = '7.5'
				EXEC SP_CHKXNSAVELOG 'SLS_after', @CStep,1, @nSpId,'',1	 		 		

				EXEC SP3S_VALIDATE_GVREDEMPTION_SINGLECHANNEL
				@NSPID= @nSpid,
				@nMode= 2,
				@cLocId= @cLocationId,
				@bCalledfromSaveTran= 1

				IF EXISTS (SELECT TOP 1 gv_srno FROM validate_sls_gvredemption_upload (NOLOCK)
							WHERE sp_id= @nSpId AND ISNULL(errmsg,'')<>'')
				BEGIN
					SELECT TOP 1 @cErrormsg=errmsg FROM validate_sls_gvredemption_upload(NOLOCK)
					WHERE sp_id = @nSpId AND ISNULL(errmsg,'')<>''

					set @bValidationGvLocalFailed = 1

					select* from validate_sls_gvredemption_upload(NOLOCK) WHERE sp_id = @nSpId
					GOTO END_PROC
				END

			END
		END
	 END
//STEP 2 : END
	IF @NUPDATEMODE IN(3,4)
	BEGIN

		IF  ISNULL(@cMemoId,'') = ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@cStep)) + ' MEMO ID Required IF CALLED FROM '+
			(CASE WHEN @nUpdatemode = 3 THEN 'Cancellation' ELSE 'CTRL + F8' END)
			GOTO END_PROC
		END
		ELSE
		IF ISNULL(@CMEMODT,'') = '' AND @nUpdatemode = 4
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@cStep)) + ' MEMO DATE REQUIRED IF CALLED FROM CTRL + F8'
			GOTO END_PROC
		END

		SELECT @DCMDT=CM_DT,@CKEYFIELDVAL1=cm_id FROM cmm01106(NOLOCK) WHERE cm_id = @CMEMOID
		SET @cStep = 8.3
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

		EXEC SP3S_upd_qty_lastupdate
		@nUpdateMode=3,
		@cXnType='SLS',
		@cMasterTable='cmm01106',
		@cMemoIdCol='cm_id',
		@cMemoId=@cMemoId,
		@CERRORMSG=@CERRORMSG OUTPUT


		IF ISNULL(@cErrormsg,'')<>''
			GOTO END_PROC



		IF @NUPDATEMODE = 4
			GOTO UPDATEDATE


	END


	IF @NUPDATEMODE=5
	BEGIN
		DECLARE @cPayModeCodeModified VARCHAR(10),@BPayModeModified bit
		SET @cStep = 9.2
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


		SET @CCMD = 'SELECT TOP 1 @CKEYFIELDVAL1 = MEMO_ID FROM SLS_PAYMODE_XN_DET_UPLOAD (NOLOCK) ' + @CWHERECLAUSE1


		EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT',@CKEYFIELDVAL1 OUTPUT

		SELECT TOP 1 @NINVALIDGVAMOUNT=AMOUNT FROM SLS_PAYMODE_XN_DET_UPLOAD(NOLOCK) WHERE SP_ID = @NSPID
		AND PAYMODE_CODE = 'GVC0001' AND GV_SRNO = '' AND AMOUNT<>0

		IF ISNULL(@NINVALIDGVAMOUNT,0)<>0
		BEGIN
			SET @CERRORMSG='PAYMENT ENTRY WITH GIFT VOUCHER AMOUNT : '+LTRIM(RTRIM(STR(@NINVALIDGVAMOUNT,10,2)))+' FOUND WITH BLANK GV NO....CANNOT SAVE'
			GOTO END_PROC
		END

		SET @cStep = 10.2
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

		SELECT TOP 1 @cPayModeCodeModified=isnull(a.paymode_code, b.paymode_code) FROM
		 (SELECT A.MEMO_ID, A.PAYMODE_CODE, SUM(AMOUNT) AS AMOUNT FROM PAYMODE_XN_DET A  (NOLOCK)
		 WHERE MEMO_ID= @CKEYFIELDVAL1 AND xn_type = 'SLS' GROUP BY A.MEMO_ID, A.PAYMODE_CODE) A
			 FULL OUTER JOIN
			 (SELECT A.MEMO_ID, A.PAYMODE_CODE, SUM(AMOUNT) AS AMOUNT FROM sls_paymode_xn_det_upload A  (NOLOCK)
			   WHERE sp_id= @nSpId GROUP BY A.MEMO_ID, A.PAYMODE_CODE
	 
			 ) B ON A.MEMO_ID=B.MEMO_ID AND A.PAYMODE_CODE=B.PAYMODE_CODE
			WHERE ISNULL(A.AMOUNT,0)<>ISNULL(B.AMOUNT,0)


		SET @cPayModeCodeModified = ISNULL(@cPayModeCodeModified, '')
		SET @BPayModeModified = (CASE WHEN @cPayModeCodeModified<>'' THEN 1 else 0 end)
		SET @dTLastUpdate = DBO.fn3s_getgmttime(@cLocationId)

		UPDATE CMM01106 WITH(ROWLOCK) SET EDT_USER_CODE = @CWIZAPPUSERCODE, last_update = @dTLastUpdate,
	   PAYMENT_MODE_MODIFIED = @BPayModeModified WHERE CM_ID = @CKEYFIELDVAL1


		IF @BPayModeModified = 1
		BEGIN
			SET @cStep = 200	
			IF @BTILL_ENABLED = 1
			BEGIN
				EXEC SP_CHKXNSAVELOG 'SLS_after',@cStep,0,@NSPID,1
			
				EXEC SP3S_UPDATESHIFT_AMOUNT
							@CXN_TYPE='SLS'
						,@CXN_ID=@CKEYFIELDVAL1
						,@NMODE=2
						,@NUPDATEMODE=@NUPDATEMODE
						,@CERRMSGOUT=@CERRORMSG OUTPUT
						, @CDEPT_ID = @CLOCID



				IF ISNULL(@CERRORMSG,'')<>''
					GOTO END_PROC
			END
		END


		SET @cStep = 205
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1	

		IF EXISTS(SELECT TOP 1 'U' FROM PAYMODE_XN_DET (NOLOCK) WHERE XN_TYPE = 'sls' AND MEMO_ID = @CKEYFIELDVAL1 AND PAYMODE_CODE IN('0000004','0000001','0000002','CMR0001') ) 
		begin
					EXEC SP3S_UPDATE_CUSTOMERBALANCES @CKEYFIELDVAL1,'SLS', @CERRORMSG output ,1
		end



		EXEC SAVETRAN_DELETE_MISSINGROWS
		@nSpId = @nSpId,
		@cMemoIdCol = 'memo_id',
		@cMemoId = @cKeyfieldval1,
		@cMainTable = 'paymode_xn_det',
		@cTemptable = 'sls_paymode_xn_det_upload',
		@cFilterCondition = ' AND xn_type=''SLS''',
		@cErrormsg = @cErrormsg OUTPUT

		  IF ISNULL(@cErrormsg,'')<>''
			GOTO END_PROC

		SET @cStep = 210
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1		

		-- UPDATING ROW_ID IN TEMP TABLES - PAYMODE_XN_DET
		IF EXISTS(SELECT TOP 1 row_id FROM SLS_paymode_xn_det_UPLOAD (NOLOCK) WHERE sp_id= @nSpId AND amount = 0)
			DELETE FROM SLS_paymode_xn_det_UPLOAD WITH(ROWLOCK) WHERE sp_id = @nSpId AND amount = 0


		SET @cStep = 220
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1		
		
		-- UPDATING ROW_ID IN TEMP TABLES - PAYMODE_XN_DET
		SET @CCMD = N'UPDATE SLS_PAYMODE_XN_DET_UPLOAD WITH (ROWLOCK) SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE '+@CWHERECLAUSE+' AND LEFT(ROW_ID,5) = ''LATER'''
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD

		SET @cStep = 240	
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1





		EXEC UPDATEMASTERXN_OPT
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME2
			, @CKEYFIELD1	= 'ROW_ID'
			, @LINSERTONLY  = 0
			, @BALWAYSUPDATE = 1				
			, @CFILTERCONDITION=@CWHERECLAUSE


		GOTO LBLCHECKCUSTOMERLIMIT

	END

	IF @NUPDATEMODE IN(1,2,3) AND NOT(@BCALLEDFROMESTIMATE= 1)
	BEGIN


		SET @cStep = 276--ADDED
		SELECT @BALLOWNEGSTOCK =VALUE FROM USER_ROLE_DET A(NOLOCK)--ADDED
	   JOIN USERS B(NOLOCK)--ADDED
	  ON A.ROLE_ID=B.ROLE_ID
	  WHERE USER_CODE=@CWIZAPPUSERCODE
	  AND FORM_NAME='FRMSALE' 
		AND FORM_OPTION = 'ALLOW_NEG_STOCK'


		SET @BALLOWNEGSTOCK = ISNULL(@BALLOWNEGSTOCK, 0)
		//Rohit 17-04-2023 Against WizTicket 0323-00169
		//--FOR SUPER USER NEGATIVE STOCK SHOULD NOT BE ALLOWED
		//IF @CWIZAPPUSERCODE='0000000'
		//   SET @BALLOWNEGSTOCK=0
	    
		IF @BCALLEDFROMCASHIERMODULE = 0
		BEGIN
			IF @NUPDATEMODE=1 AND EXISTS(SELECT TOP 1 cm_id FROM SLS_PACK_SLIP_REF_UPLOAD (NOLOCK) WHERE sp_id= @nSpId)
				SET @BCALLEDFROMCASHIERMODULE = 1
		END

		IF EXISTS(SELECT TOP 1 product_code from SAVETRAN_BARCODE_NETQTY (NOLOCK) WHERE sp_id= @nSpid)
			DELETE FROM SAVETRAN_BARCODE_NETQTY WITH(ROWLOCK) WHERE sp_id = @nSpId

		IF @BSLRRECONREQD = 1 AND @NUPDATEMODE IN(2,3)
		BEGIN
			SET @cStep = 265
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1		


			SELECT @DSLRRECONCUTOFFDATE = SLR_RECON_CUTOFF_DATE FROM LOCATION(NOLOCK) WHERE DEPT_ID = @CLOCATIONID


			IF @DCMDT<ISNULL(@DSLRRECONCUTOFFDATE,'')
				SET @BSLRRECONREQD = 0
		END

		IF @NUPDATEMODE IN(1,2)
		BEGIN
			INSERT SAVETRAN_BARCODE_NETQTY(SP_ID, PRODUCT_CODE, DEPT_ID, BIN_ID, XN_QTY, new_entry, xn_bo_order_id)
			SELECT @nSpId AS sp_id, CD.PRODUCT_CODE,@CLOCATIONID,CD.BIN_ID,
			(CD.QUANTITY+ISNULL(CD.FOC_QUANTITY,0)) AS XN_QTY,1 as new_entry,ISNULL(cd.REF_ORDER_ID,'') xn_bo_order_id
			FROM SLS_CMM01106_UPLOAD CM(NOLOCK)
			JOIN SLS_cmd01106_UPLOAD CD(NOLOCK) ON CM.sp_ID=CD.sp_ID
		   WHERE CM.SP_ID= @NSPID AND (@BSLRRECONREQD= 0 OR CD.QUANTITY>0)
			UNION ALL
			SELECT @nSpId AS sp_id, CD.PRODUCT_CODE,@CLOCATIONID AS DEPT_ID,'000' AS BIN_ID,
			 CD.QUANTITY AS XN_QTY,1 as new_entry,'' xn_bo_order_id
			 FROM SLS_CMM01106_UPLOAD CM(NOLOCK)
			JOIN SLS_cmd_cons_UPLOAD CD(NOLOCK) ON CM.SP_ID=CD.SP_ID
		   WHERE CM.SP_ID= @NSPID


		   print 'Insert bar codes for sisloc stock updation'
			--if @@spid= 94
		   --  select 'check bc',* FROM  SAVETRAN_BARCODE_NETQTY B (nolock)
			--	WHERE sp_id = @nSpId

	   END

	
		--Creating problem at the time of Cancellation If Bill is generated by removing bar codes picked from Pack slip
		---While doing testing for Suvidha (Date:02-02-2022 @8:45 Pm )
		--IF @NUPDATEMODE = 3
		--  INSERT SAVETRAN_BARCODE_NETQTY(sp_id, PRODUCT_CODE, DEPT_ID, BIN_ID, XN_QTY, new_entry)
		--	SELECT @nSpId AS sp_id, B.PRODUCT_CODE,@CLOCATIONID,B.BIN_ID,(SUM(B.QUANTITY+ISNULL(B.FOC_QUANTITY,0))),
		--	0 as new_entry
		--	FROM RPS_DET B(NOLOCK)
		--	JOIN RPS_MST C(NOLOCK) ON C.CM_ID=B.CM_ID
		--	WHERE C.ref_cm_id= @cMemoId AND (@BSLRRECONREQD= 0 OR B.QUANTITY>0)
		--	GROUP BY B.PRODUCT_CODE,B.DEPT_ID,B.BIN_ID
		--ELSE
		IF @NUPDATEMODE=1
			INSERT SAVETRAN_BARCODE_NETQTY(sp_id, PRODUCT_CODE, DEPT_ID, BIN_ID, XN_QTY, new_entry)
			SELECT @nSpId AS sp_id, B.PRODUCT_CODE,@CLOCATIONID,B.BIN_ID,-(SUM(B.QUANTITY+ISNULL(B.FOC_QUANTITY,0))),
			1 as new_entry
			FROM RPS_DET B(NOLOCK)
			JOIN RPS_MST C(NOLOCK) ON C.CM_ID=B.CM_ID
		   JOIN SLS_PACK_SLIP_REF_UPLOAD R (NOLOCK) ON R.PACK_SLIP_ID= C.CM_ID

		   WHERE R.SP_ID = @nSpId AND (@BSLRRECONREQD= 0 OR B.QUANTITY>0)
			GROUP BY B.PRODUCT_CODE,B.DEPT_ID,B.BIN_ID

		IF @NUPDATEMODE IN(2,3)
		BEGIN
			INSERT SAVETRAN_BARCODE_NETQTY(SP_ID, PRODUCT_CODE, DEPT_ID, BIN_ID, XN_QTY, new_entry, xn_bo_order_id)
			SELECT @nSpId AS sp_id, CD.PRODUCT_CODE,@CLOCATIONID,CD.BIN_ID,-(CD.QUANTITY+ISNULL(CD.FOC_QUANTITY,0)) AS XN_QTY,
 			0 as new_entry,ISNULL(cd.ref_order_id,'')  xn_bo_order_id
			 FROM CMM01106 CM(NOLOCK)
			JOIN CMD01106 CD(NOLOCK) ON CM.CM_ID=CD.CM_ID
		   WHERE CM.CM_ID= @CMEMOID AND (@BSLRRECONREQD= 0 OR CD.QUANTITY>0)
			UNION ALL
			SELECT @nSpId AS sp_id, CD.PRODUCT_CODE,@CLOCATIONID AS DEPT_ID,'000' AS BIN_ID,-CD.QUANTITY AS XN_QTY,
			0 as new_entry,''  xn_bo_order_id
			FROM CMM01106 CM(NOLOCK)
			JOIN CMD_CONS CD(NOLOCK) ON CM.CM_ID=CD.CM_ID
		   WHERE CM.CM_ID= @CMEMOID


		   IF @NUPDATEMODE = 3

		   BEGIN
				IF EXISTS (SELECT TOP 1 'U' FROM CMM01106 CM (NOLOCK) WHERE CM.CM_ID= @CMEMOID AND ISNULL(MANUAL_BILL,0)=1)
				    SET @BALLOWNEGSTOCK = 1
			END

			EXEC SP3S_UPDATE_PMTSTOCK_SLS
			@nUpdatemode = @nUpdatemode,
			@bREvertFlag = 1,
			@BALLOWNEGSTOCK = @BALLOWNEGSTOCK,
			@nSpId = @nSpId,
			@CERRORMSG = @CERRORMSG OUTPUT,
			@BNEGSTOCKFOUND=@BNEGSTOCKFOUND OUTPUT

			IF ISNULL(@cErrormsg,'')<>''
				GOTO END_PROC

			IF EXISTS(SELECT TOP 1 'U' FROM PAYMODE_XN_DET (NOLOCK) WHERE XN_TYPE = 'sls' AND MEMO_ID = @CKEYFIELDVAL1 AND PAYMODE_CODE IN('0000004','0000001','0000002','CMR0001') ) 
			begin
					EXEC SP3S_UPDATE_CUSTOMERBALANCES @CKEYFIELDVAL1,'SLS', @CERRORMSG output ,1
			end



		END

	END

	IF @NUPDATEMODE IN(1,2)
	BEGIN
		DECLARE @NNET_AMOUNT NUMERIC(12,2),@CALNETAMOUNT NUMERIC(12,2)

		SELECT @NNET_AMOUNT = NET_AMOUNT FROM SLS_CMM01106_UPLOAD(NOLOCK) WHERE SP_ID = @NSPID


		SET @cStep = 60
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

		SELECT @NCMMDISCAMT = DISCOUNT_AMOUNT, @CDTCODE = DT_CODE FROM SLS_CMM01106_UPLOAD(NOLOCK) WHERE SP_ID = @NSPID



		  SET @cStep = 75


		--SELECT MRP, QUANTITY, DISCOUNT_AMOUNT, NET, PRODUCT_CODE, * FROM SLS_CMD01106_UPLOAD WHERE SP_ID = @NSPID


		SET @cStep = 75
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

		-- UPDATING ROW_ID IN TEMP TABLES - PAYMODE_XN_DET
		SET @CCMD = N'UPDATE SLS_cmd01106_UPLOAD WITH (ROWLOCK) SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE '+@CWHERECLAUSE+' AND LEFT(ROW_ID,5) = ''LATER'''
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD

		SET @cStep=80
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
		-- UPDATING ROW_ID IN TEMP TABLES - PAYMODE_XN_DET
		SET @CCMD = N'UPDATE SLS_PAYMODE_XN_DET_UPLOAD WITH (ROWLOCK) SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE '+@CWHERECLAUSE+' AND LEFT(ROW_ID,5) = ''LATER'''
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
		---- NEED TO CALCULATE TAX STRUCTURE/RECAL PAYMODE W.R.T ROUND OFF IF CALLED FROM POST-ESTIMATE
		IF @BCALLEDFROMESTIMATE=1  OR @BCALLEDFROMSLSSTOCKNACONVERT = 1
		BEGIN

		  SET @BGSTBILL=0
		
		select @DXNDT = cm_dt from SLS_cmm01106_UPLOAD where sp_id = @nSpId


		SELECT TOP 1  @CGSTCUTOFFDATE=VALUE FROM CONFIG WHERE CONFIG_OPTION='GST_CUT_OFF_DATE'
		IF ISNULL(@CGSTCUTOFFDATE,'')<>''
		BEGIN
			IF @DXNDT>=CONVERT(DATE, @CGSTCUTOFFDATE)
				SET @BGSTBILL = 1

		END

			print 'enter caltotals_sls of aftersave'
			SET @cStep = 86
			EXEC SP3S_CALTOTALS_SLS
			@nSpId=@nSpId,
			@BGSTBILL=@BGSTBILL,
			@DCMDT=@DCMDT,
			@CLOCATIONID=@CLOCATIONID,
			@BSALESSETUPDISABLED=1,
			@NLOGINSPID=@NLOGINSPID,
			@cUserCode=@CWIZAPPUSERCODE,
			@cErrormsg=@cErrormsg OUTPUT,
			@NUPDATEMODE = @NUPDATEMODE



			IF ISNULL(@cErrormsg,'')<>''
				GOTO END_PROC



			 UPDATE A SET A.TOTAL_QUANTITY=B.TOTAL_QUANTITY ,
						A.TOTAL_MRP_VALUE= B.TOTAL_MRP_VALUE,
						A.TOTAL_DISCOUNT= b.Item_discount_amount + a.discount_amount,
						A.TOTAL_GST_AMOUNT= b.TOTAL_GST_AMOUNT
			FROM SLS_CMM01106_UPLOAD A WITH (ROWLOCK)
			INNER JOIN
			(
				SELECT SP_ID, SUM(QUANTITY) AS TOTAL_QUANTITY ,
							 Sum(mrp* QUANTITY) as TOTAL_MRP_VALUE,
							 Sum(discount_amount) as Item_discount_amount,
							 sum(isnull(Igst_amount,0)+isnull(Cgst_amount,0)+isnull(Sgst_amount,0)) as TOTAL_GST_AMOUNT
				FROM  SLS_CMD01106_UPLOAD(NOLOCK)
				WHERE SP_ID = @NSPID GROUP BY SP_ID
			)B ON  A.SP_ID=B.SP_ID
			WHERE A.SP_ID=@NSPID
		END

		SET @cStep = 85.4
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1			
		
		--if @@spid=136
		--	select 'chk cmd', product_code,xn_value_without_gst,xn_value_with_gst,igst_amount,cgst_amount,sgst_amount,
		--	tax_method from SLS_cmd01106_UPLOAD where sp_id=@nSpId

		print 'enter validate gst pct'
		--if @BCALLEDFROMESTIMATE<>1
		EXEC SP3S_VALIDATE_GST_PERCENTAGE @CXNTYPE='SLS',@CXNID=@nSpId,@CCURDEPT_ID=@CLOCATIONID,@CERRORMSG=@CERRORMSG OUTPUT

		print 'finish validate gst pct'
		IF ISNULL(@CERRORMSG,'')<>''
			GOTO END_PROC


		SET @cStep = 85.6
		EXEC SP3S_VALIDATE_SCHEMERELATEDGV_REDEMPTION
		@NSPID=@NSPID,
		@cLocationId=@cLocationId,
		@dCmDt=@dCmDt,
		@NCMMSUBTOTAL=@NCMMSUBTOTAL,
		@CERRORMSG=@CERRORMSG OUTPUT

		IF ISNULL(@CERRORMSG,'')<>''
			GOTO END_PROC


	END

	SET @cStep = 260	
	EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1			




	SET @cStep = 280-- GETTING DEPTID INFO FROM TEMP TABLE
	EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1			



	SELECT TOP 1 @cGenerateMonthwiseNo=VALUE FROM CONFIG(NOLOCK) WHERE CONFIG_OPTION = 'SLS_GENMEMONO_MONTHWISE'

	SELECT TOP 1 @CMEMONOLEN=VALUE FROM CONFIG(NOLOCK) WHERE CONFIG_OPTION = 'SLS_MEMO_LEN'


	IF ISNULL(@CMEMONOLEN,'')<>'' AND @dCmDt<'2020-04-01'
		SET @NMEMONOLEN = CONVERT(INT, @CMEMONOLEN)
	ELSE
	IF  @dCmDt>='2020-04-01'
		SET @NMEMONOLEN = 12----(As discussed with Sir, 1st April 2020 onwards...All memos shall be generated of 12 Chars)


		IF @NUPDATEMODE = 1
			SET @BINSERTONLY = 1
		ELSE
			SET @BINSERTONLY= 0


		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


		SET @cStep = 290-- UPDATING AC_CODE INTO TEMP TABLES
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


		SELECT TOP 1 @NINVALIDGVAMOUNT= AMOUNT FROM SLS_PAYMODE_XN_DET_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID
		AND PAYMODE_CODE = 'GVC0001' AND GV_SRNO = '' AND AMOUNT<>0

		IF ISNULL(@NINVALIDGVAMOUNT,0)<>0
		BEGIN
			SET @CERRORMSG='PAYMENT ENTRY WITH GIFT VOUCHER AMOUNT : '+LTRIM(RTRIM(STR(@NINVALIDGVAMOUNT,10,2)))+' FOUND WITH BLANK GV NO....CANNOT SAVE'
			GOTO END_PROC
		END			
		
		-- START UPDATING XN TABLES
		IF @NUPDATEMODE = 1-- ADDMODE
	   BEGIN


			SET @cStep = 310-- GENERATING NEW KEY
	EXEC SP_CHKXNSAVELOG 'SLS_after',@cStep,0,@NSPID,1			
			
			-- GENERATING NEW JOB ORDER NO
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP = 0
			BEGIN

				SET @cStep = 320	
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


				SET @CCMD = N'SELECT TOP 1 @CUSERALIASOUT=USER_ALIAS FROM '+@CTEMPMASTERTABLE+' A (NOLOCK) 
				JOIN USERS B(NOLOCK) ON A.USER_CODE=B.USER_CODE'+@CWHERECLAUSE1

			   EXEC SP_EXECUTESQL @CCMD, N'@CUSERALIASOUT VARCHAR(5) OUTPUT', @CUSERALIASOUT= @CUSERALIAS OUTPUT
			   PRINT @CCMD

			   SET @CMEMONOPREFIX= ''


			   IF ISNULL(@cGenerateMonthwiseNo,'')='1'
					SELECT @cKeysTable = 'KEYS_CMM', @cBaseMemoPrefix = @CLOCATIONID +
					replicate('0', 2 - len(ltrim(rtrim(str(month(@DCMDT)))))) + ltrim(rtrim(str(month(@DCMDT))))
				ELSE
					SELECT @CKEYSTABLE='KEYS_CMM_'+LTRIM(RTRIM(@CUSERALIAS)),@cBaseMemoPrefix=@CLOCATIONID+@CUSERALIAS


				SET @CMEMONOPREFIX=@cBaseMemoPrefix
				
				
				--IN CASE OF CASH REFUND
				IF(SELECT COUNT(DISTINCT paymode_code) FROM SLS_PAYMODE_XN_DET_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID)=1
			    BEGIN
					IF EXISTS(SELECT TOP 1 'U' FROM SLS_PAYMODE_XN_DET_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID AND AMOUNT <0 AND PAYMODE_CODE IN ('0000000','CMR0001'))
			        BEGIN
					   print 'check cr series-1'


					   DECLARE @GEN_CASH_REF_SERIES BIT=0,@GEN_CREDIT_REF_SERIES BIT = 0, @cPaymodeCode CHAR(7)


					   SELECT TOP 1 @cPaymodeCode=paymode_code FROM SLS_PAYMODE_XN_DET_UPLOAD(NOLOCK) WHERE SP_ID = @NSPID


					   IF @cPaymodeCode = '0000000'

					   BEGIN
						print 'check cr series-2'
						   IF EXISTS(SELECT TOP 1 * FROM CONFIG (NOLOCK) WHERE
									 CONFIG_OPTION LIKE 'DONOT_GENERATE_SEPARATE_SERIES_FOR_CASH_REFUND')
							  SELECT TOP 1 @GEN_CASH_REF_SERIES=ISNULL(VALUE,0)
							  FROM CONFIG(NOLOCK)
							  WHERE CONFIG_OPTION LIKE 'DONOT_GENERATE_SEPARATE_SERIES_FOR_CASH_REFUND'		
						   ELSE
							  SET @GEN_CASH_REF_SERIES=0		  
					   END
					   ELSE
					   BEGIN
							print 'check cr series-3'
						   IF EXISTS(SELECT TOP 1 * FROM CONFIG (NOLOCK) WHERE
									 CONFIG_OPTION LIKE 'GENERATE_SEPARATE_SERIES_FOR_CREDIT_REFUND')
							  SELECT TOP 1 @GEN_CREDIT_REF_SERIES=ISNULL(VALUE,0)
							  FROM CONFIG(NOLOCK)
							  WHERE CONFIG_OPTION LIKE 'GENERATE_SEPARATE_SERIES_FOR_CREDIT_REFUND'		
						   ELSE
							  SET @GEN_CREDIT_REF_SERIES=0		  					   
					   END
					   print 'check cr series-4'
					   --GENERATE THE SERIES
					   SET @CMEMONOPREFIX=@cBaseMemoPrefix+
			           (CASE WHEN @cPaymodeCode = '0000000' THEN
						 (CASE ISNULL(@GEN_CASH_REF_SERIES,0) WHEN 1 THEN '' ELSE 'R' END)
			           ELSE
					   (CASE ISNULL(@GEN_CREDIT_REF_SERIES,0) WHEN 1 THEN 'F' ELSE '' END)
			           END)
			        END
				END


				IF EXISTS(SELECT TOP 1 'U' FROM SLS_PAYMODE_XN_DET_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID AND AMOUNT <0 AND PAYMODE_CODE = '0000004')

				BEGIN
					 SET @CMEMONOPREFIX=@cBaseMemoPrefix+'N'
			    END

				SELECT TOP 1 @NINVMODE=INV_MODE,@NINVTYPE=INV_TYPE,@NMEMO_TYPE=MEMO_TYPE,@cPartyGstno=ISNULL(party_gst_no,'')
				FROM SLS_CMM01106_UPLOAD(NOLOCK) WHERE SP_ID = @NSPID


				IF ISNULL(@NINVMODE,0)=2 OR ISNULL(@NINVTYPE,0)=2
				BEGIN
					SET @CSTRSTUFF=(CASE WHEN ISNULL(@NINVMODE,0)=2 THEN 'T' ELSE 'O' END)
					SET @CMEMONOPREFIX = REVERSE(LEFT(REVERSE(@CMEMONOPREFIX), 1) + @CSTRSTUFF + SUBSTRING(REVERSE(@CMEMONOPREFIX), 2, LEN(REVERSE(@CMEMONOPREFIX))))
				END

				IF ISNULL(@NMEMO_TYPE,0)=2
				BEGIN
					SET @CMEMONOPREFIX= CAST(SUBSTRING(@CMEMONOPREFIX,1, LEN(@CMEMONOPREFIX)-1) AS VARCHAR(100))+'E'
				END    
				--
				
				SET @cStep = 322
				DECLARE @cOutputMemoPrefix VARCHAR(25)

				EXEC SP3S_GETENINVOICE_MEMOPREFIX
				@cXnType='SLS',
				@cPartyGstNo=@cPartyGstno,
				@cSourceLocId=@CLOCATIONID,
				@cFinyear=@cFinyear,
				@cInputMemoPrefix=@CMEMONOPREFIX,
				@nSpId=@nSpId,
				@cErrormsg=@cErrormsg OUTPUT,
				@cOutputMemoPrefix = @cOutputMemoPrefix OUTPUT

				  IF ISNULL(@cErrormsg,'')<>''
					GOTO END_PROC

				SET @CMEMONOPREFIX = @cOutputMemoPrefix + (CASE WHEN RIGHT(@cOutputMemoPrefix,1)<>'-' THEN '-' ELSE '' END)

				SET @cStep = 325
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1



				EXEC GETNEXTKEY_OPT @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
								@CFINYEAR,0, @CKEYSTABLE,@CMEMONOVAL OUTPUT



				PRINT @CMEMONOVAL
				SET @CCMD = N'IF EXISTS ( SELECT '+@CMEMONO+' FROM ['+@CMASTERTABLENAME+']  (NOLOCK) 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT = 0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT

			END

			IF @CMEMONOVAL IS NULL OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@cStep)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC
			END



			SET @cStep = 327		-- GENERATING NEW ID
			EXEC SP_CHKXNSAVELOG 'SLS_after',@cStep,0,@NSPID,1
			
			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@cStep)) + ' ERROR CREATING NEXT MEMO ID....'
				  -- SET @CRETCMD = N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  GOTO END_PROC
			END


			IF @bSisLoc=0
			BEGIN
				SET @cStep = 329		-- UPDATING NEW ID INTO TEMP TABLES
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

				EXEC SP3S_CHECK_PREVMEMO
				@CFINYEAR=@CFINYEAR,
				@CMEMONO=@CMEMONOVAL,
				@CERRORMSG=@CERRORMSG OUTPUT


				IF ISNULL(@CERRORMSG,'')<>''
					GOTO END_PROC
			END

			SET @cStep = 332		-- UPDATING NEW ID INTO TEMP TABLES
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
			
			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' WITH (ROWLOCK) SET ' + @CMEMONO + '=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''',MEMO_PREFIX='''+@CMEMONOPREFIX+''' '+@CWHERECLAUSE1
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD

			IF NOT(@BCALLEDFROMESTIMATE= 1) AND @NUPDATEMODE = 1 AND ISNULL(@BSISLOC,0)=0
			BEGIN

				SET @cStep = 335						
				EXEC SP_VALIDATE_MEMODATE_SLS
				@CXNTYPE='SLS',
				@nSpId=@nSpid,
				@CKEYSTABLE=@CKEYSTABLE,
				@CERRORMSG=@CERRORMSG OUTPUT


				IF ISNULL(@CERRORMSG,'')<>''
					GOTO END_PROC

				SET @cStep = 337


				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


				SET @cCmd = N'UPDATE '+@CKEYSTABLE+' SET last_cm_dt='''+CONVERT(VARCHAR, @dCmDt,110)+'''
							WHERE prefix = '''+@CMEMONOPREFIX+''' AND finyear = '''+@cFinyear+''''
				PRINT @cCmd
				EXEC SP_EXECUTESQL @cCmd

			END




			IF ISNULL(@CONLINE_REDEMPTIONS_CN,'')<>'' AND(@CLOCATIONID= @CHOLOCATIONID OR @bServerLoc = 1)
			BEGIN

				SET @cStep = 340	
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			   SET @CCMD = 'IF (SUBSTRING(''' + @CMEMONOVAL+''',5,1)=''N'')
			              SET @CONLINE_CN = 1

					   ELSE
							   SET @CONLINE_CN=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD,N'@CONLINE_CN VARCHAR(5)OUTPUT',@CONLINE_CN OUTPUT


				 IF ISNULL(@CONLINE_CN,0)=1
				  BEGIN

					  SET @cStep = 345	
					  EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


					  SET @CCMD = N'INSERT ONLINE_CN_REDEEMPTION( CN_ID, REDEEMPTION_BILL_NO, REDEEMPTION_BILL_DATE, REDEEMED_AT, LAST_UPDATED, CM_ID ) 
								  SELECT '''+@CKEYFIELDVAL1+''' AS CN_ID,'''' AS REDEEMPTION_BILL_NO,'''' AS REDEEMPTION_BILL_DATE,
								  '''' AS REDEEMED_AT,'''' AS LAST_UPDATED,'''' AS CM_ID  '
					  EXEC SP_EXECUTESQL @CCMD

				  END


			END



			SET @cStep = 350
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' WITH (ROWLOCK) SET ' + @CKEYFIELD1 + ' = '''+@CKEYFIELDVAL1+''''+@CWHERECLAUSE1
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD


			SET @cStep = 355
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE2 + ' WITH (ROWLOCK) SET ' + @CKEYFIELD1_DETAIL2 + ' = '''+@CKEYFIELDVAL1+''''+@CWHERECLAUSE1
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD


			SET @cStep = 360
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			SET @cStep = 365
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE8 + ' WITH (ROWLOCK) SET ' + @CKEYFIELD1_DETAIL2 + ' = '''+@CKEYFIELDVAL1+''''+@CWHERECLAUSE1
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD

			SET @cStep = 365.4
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			EXEC SP3S_GENAPR_DATA
			@nSpId=@nSpId,
			@cMemoId=@CKEYFIELDVAL1,
			@CFINYEAR=@CFINYEAR,
			@cLocationId=@cLocationId,
			@BALLOWNEGSTOCK=@BALLOWNEGSTOCK,
			@CERRORMSG=@CERRORMSG OUTPUT

			IF ISNULL(@cErrormsg,'')<>''
				GOTO END_PROC

			SET @cStep = 372
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE

			SET @cStep = 392		-- GETTING ID INFO FROM TEMP TABLE


			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
			IF EXISTS(SELECT TOP 1 cm_id FROM sls_bo_ref (NOLOCK) WHERE cm_id= @CKEYFIELDVAL1)
				DELETE FROM SLS_BO_REF WITH(ROWLOCK) WHERE CM_ID = @CKEYFIELDVAL1



			IF @NUPDATEMODE = 3
			BEGIN
				SET @cStep = 405
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' WITH (ROWLOCK) SET CANCELLED = 1,LAST_UPDATE=GETDATE() WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''
				EXEC SP_EXECUTESQL @CCMD

				INSERT WIZCLIP_CMM_CANCELREQ(CM_ID, VALID, ERRORMSG) SELECT @CKEYFIELDVAL1,1,''


				SET @cStep = 392.4-- GETTING ID INFO FROM TEMP TABLE


				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
				IF EXISTS(SELECT TOP 1 cm_id FROM rps_mst (NOLOCK) WHERE REF_CM_ID= @CKEYFIELDVAL1)
					UPDATE RPS_MST WITH(ROWLOCK) SET REF_CM_ID = '', CANCELLED = 1
					//--CANCELLED=1 Done by Rohit 25-04-2023 WizTickit : 0423-00118
					WHERE REF_CM_ID = @CKEYFIELDVAL1


					DECLARE @CHBDMEMO_ID VARCHAR(50)

					SELECT @CHBDMEMO_ID = HBD_MEMO_ID
					FROM ITEM_STATUS A(NOLOCK) WHERE CM_ID = @CKEYFIELDVAL1


				   IF ISNULL(@CHBDMEMO_ID,'')<>''
				   BEGIN
					DECLARE @OUTPUT_hbd TABLE(ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))  
				        
						INSERT INTO @OUTPUT_HBD
						EXEC SAVETRAN_HBD
						@NUPDATEMODE = 3,
						@NSPID = 0,
						@CMEMOID = @CHBDMEMO_ID,
						@BCALLEDFROMSLSSAVETRAN = 1


				   END

				   	SET @cStep = 394		
			
				    EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

				   IF EXISTS(SELECT TOP 1 'U' FROM CMD01106 (nolock) WHERE CM_ID = @CKEYFIELDVAL1 AND ISNULL(REF_ORDER_ID,'')<>'')
				   begin

					   UPDATE A SET ONLINEORDERSTATUS='ACCEPTED'
					   FROM BUYER_ORDER_MST A(NOLOCK)
					   JOIN CMD01106 B(NOLOCK) ON A.ORDER_ID =B.REF_ORDER_ID
					  WHERE B.CM_ID = @CKEYFIELDVAL1


				  end


			   SET @cStep = 397

			  UPDATE apm01106 WITH (ROWLOCK) SET ref_cm_id= '' WHERE ref_cm_id = @CKEYFIELDVAL1


				 SET @cStep = 400


			   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

			   EXEC SP3S_CAPTURE_AUDIT_TRAIL 'SLS', @CMEMOID, @CTEMPMASTERTABLE, @CTEMPDETAILTABLE, @NSPID, @CMACHINENAME, @CWINDOWUSERNAME, @CWIZAPPUSERCODE,1,'1900-01-01'

		   END
		   ELSE

		   BEGIN

			   SET @cStep = 410

			   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

				-- UPDATING SENTTOHO FLAG
			   SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' WITH (ROWLOCK) SET LAST_UPDATE=GETDATE()'+@CWHERECLAUSE1
			   EXEC SP_EXECUTESQL @CCMD	


				----- Need to do this so that Wizclip bill does not gets reuploaded

			   IF @BCALLEDFROMSLSSTOCKNACONVERT = 1 OR @BCALLEDFROMESTIMATE = 1

			   BEGIN
				   SET @cStep = 410.5

				   UPDATE sls_cmm01106_upload WITH (ROWLOCK) SET wizclip_bill_synch_last_update= last_update

				   WHERE sp_id = @nSpId

			   END


		   END



		   IF @BCALLEDFROMESTIMATE<>1

		   BEGIN


			 IF @BCALLEDFROMSLSSTOCKNACONVERT= 0 AND @BCALLEDFROMESTIMATE = 0 AND @BTILL_ENABLED = 1

			 BEGIN
				   SET @cStep = 445

				   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1	   	
						
					
					--REVERT THE CASH AMOUNT FOR THIS TRANSACTION IN TILL AMOUNT

				   EXEC SP3S_UPDATESHIFT_AMOUNT

				   @CXN_TYPE= 'SLS'
				   , @CXN_ID= @CKEYFIELDVAL1
				   , @NMODE= 2
				   , @NUPDATEMODE= @NUPDATEMODE
				   , @CERRMSGOUT= @CERRORMSG OUTPUT

				   , @CDEPT_ID= @CLOCID


				   IF ISNULL(@CERRORMSG,'')<>''
						GOTO END_PROC
			  END

			  IF @NUPDATEMODE=3
					GOTO END_PROC
			END

		END					-- END OF EDITMODE


		IF @NUPDATEMODE IN(1,2)
		BEGIN
			SET @cStep = 447
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1	   	

			EXEC SP3S_UPDATE_PMTSTOCK_SLS
			@nUpdatemode=@nUpdatemode,
			@bREvertFlag=0,
			@BALLOWNEGSTOCK=@BALLOWNEGSTOCK,
			@nSpId=@nSpId,
			@CERRORMSG=@CERRORMSG OUTPUT,
			@BNEGSTOCKFOUND = @BNEGSTOCKFOUND OUTPUT

			  IF ISNULL(@cErrormsg,'')<>''
				GOTO END_PROC

		   IF EXISTS(SELECT TOP 1 product_code FROM  sls_cmd01106_upload (NOLOCK) WHERE sp_id= @nSpId AND quantity<0)
		   BEGIN
				SET @cStep = 448.5
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1	   	

				EXEC SP3S_UPD_SKUXFPNEW
				@CXN_TYPE='SLR',
				@CXN_ID=@nSpId
		   END
		END

		SET @cStep = 450
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1




		IF EXISTS(SELECT TOP  1 'U' FROM PSHBD_HOLD_BACK_DELIVER_MST_UPLOAD (nolock) WHERE SP_ID= @NLOGINSPID)
		BEGIN

			UPDATE A SET REF_CMD_ROW_ID=B.ROW_ID
			FROM PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD A(NOLOCK)
			JOIN SLS_CMD01106_UPLOAD B(NOLOCK) ON A.REF_CMD_ROW_ID=B.TEMP_ROW_ID
		   WHERE A.SP_ID= @NLOGINSPID AND B.SP_ID= @NSPID


		   declare @chbdmemoprefix varchar(10)
			set @chbdmemoprefix = @CLOCATIONID + @CUSERALIAS + '-'

			EXEC SP3S_GEN_HOLDBACK_MEMO
			@NUPDATEMODE=@NUPDATEMODE,
			@NSPID=@NLOGINSPID ,
			@CMEMOID=@CKEYFIELDVAL1,
			@CLOCATIONID=@CLOCATIONID,
			@CFINYEAR=@CFINYEAR,
			@CMEMOPREFIX=@chbdmemoprefix,
			@CERRORMSG=@CERRORMSG OUTPUT


			IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC

				UPDATE ST SET CM_ID = A.CM_ID, REF_CMD_ROW_ID = A.ROW_ID,
						 EMP_CODE = A.emp_code, EMP_CODE1 = A.emp_code1,
						 EMP_CODE2 = A.emp_code2, mrp = A.MRP
				FROM SLS_CMD01106_UPLOAD A
				JOIN hold_back_deliver_det B(NOLOCK) ON A.ROW_ID=B.ref_cmd_row_id
			   JOIN ITEM_STATUS ST (NOLOCK) ON B.ROW_ID = ST.HBD_ROW_ID

			   WHERE A.SP_ID= @NSPID



	   end

	   IF EXISTS (SELECT TOP 1 CM_ID FROM SLS_CMM_FLIGHT_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID)
		BEGIN
			SET @cStep = 476
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1					


			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE9 + ' WITH (ROWLOCK) SET CM_ID = '''+@CKEYFIELDVAL1+''''+@CWHERECLAUSE1
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD

		END

		IF EXISTS(SELECT TOP 1 CM_ID FROM SLS_CMD_CONS_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID)
		BEGIN
			SET @cStep = 478
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1					


			SET @CCMD = 'UPDATE SLS_CMD_CONS_UPLOAD WITH (ROWLOCK) SET CM_ID = '''+@CKEYFIELDVAL1+''''+@CWHERECLAUSE1
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD

		END

		IF EXISTS(SELECT TOP 1 CM_ID FROM SLS_COUPON_REDEMPTION_INFO_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID AND ecoupon_id<>'')
		BEGIN
			SET @cStep = 480
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1					


			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE10 + ' WITH  (ROWLOCK) SET CM_ID = '''+@CKEYFIELDVAL1+''''+@CWHERECLAUSE1
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		END
			
		-- UPDATING MASTER TABLE(PIM01106) FROM TEMP TABLE

	   IF @NUPDATEMODE<> 3
		BEGIN

			SET @cStep = 495		-- UPDATING MASTER TABLE

			EXEC SP_CHKXNSAVELOG 'SLS_after',@cStep,0,@NSPID,1
			
			-- WE NEED TO EXECUTE THIS STEP BECAUSE DUE TO UNKNOWN REASONS, INSERTSTR IN XNSINFO TABLE GETS BLANK
			-- WHICH MAY LEAD TO NON EXECUTION OF INSERT STATEMENTS IN MERGING
			IF EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO (NOLOCK) WHERE XN_TYPE= 'XNSSLS' AND ISNULL(INSERTSTR,'')='')
			BEGIN
				SET @CERRORMSG='INSERT/UPDATRE STRING FOR SOME TABLE FOUND BLANK..'
				GOTO END_PROC
			END

			SET @cStep = 497
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
			
			--- This step was running slow at Suvidha ,So commented this for now as per SIR(Date:25-01-2022)
			IF EXISTS(SELECT TOP 1 CM_ID FROM SLS_CMM01106_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID AND CM_DT>='2017-07-01')
			BEGIN
				SET @cStep = 497.6
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

				DECLARE @nTotalCmdwithGst NUMERIC(14,2)
				SELECT @nTotalCmdwithGst = SUM(isnull(XN_VALUE_WITHOUT_GST, 0) + isnull(IGST_AMOUNT, 0) + isnull(CGST_AMOUNT, 0) + isnull(SGST_AMOUNT, 0) + isnull(TAX_AMOUNT, 0) + isnull(cess_amount, 0) + isnull(gst_cess_amount, 0))
				FROM SLS_CMD01106_UPLOAD A(NOLOCK)  WHERE A.SP_ID=@NSPID

			   SET @cStep = 498.2

			   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			   UPDATE SLS_CMM01106_UPLOAD WITH (ROWLOCK) SET GST_ROUND_OFF= (NET_AMOUNT - (ISNULL(OTHER_CHARGES_TAXABLE_VALUE, 0) +
				   ISNULL(OTHER_CHARGES_CGST_AMOUNT, 0) + ISNULL(OTHER_CHARGES_SGST_AMOUNT, 0) + ISNULL(OTHER_CHARGES_IGST_AMOUNT, 0)
				   + ROUND_OFF + @nTotalCmdwithGst))

			   WHERE SP_ID = @NSPID

		   END

		   SET @cStep = 500

		   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


		   DECLARE @tOldEcoupons TABLE (ecoupon_id varchar(50))

			IF @bEnableWizclip = 1
			BEGIN
				IF @nUpdatemode=2
				BEGIN
					SET @cStep = 502
					INSERT @tOldEcoupons(ecoupon_id)
					SELECT ecoupon_id FROM coupon_redemption_info(NOLOCK) WHERE cm_id = @cKeyfieldVal1
					 AND ISNULL(ecoupon_id,'')<>''
				END

				SET @cStep = 506
				SELECT TOP 1 @cEcouponIdChanged=a.ecoupon_id FROM SLS_COUPON_REDEMPTION_INFO_UPLOAD A(NOLOCK)
				LEFT OUTER JOIN @tOldEcoupons b ON a.ecoupon_id=b.ecoupon_id
				WHERE SP_ID=@NSPID AND b.ecoupon_id IS NULL AND ISNULL(a.ecoupon_id,'')<>''

				SET @cStep = 508
				IF @cEcouponIdChanged IS NULL
					SELECT TOP 1 @cEcouponIdChanged=a.ecoupon_id FROM @tOldEcoupons A
					LEFT OUTER JOIN SLS_COUPON_REDEMPTION_INFO_UPLOAD b(NOLOCK)  ON a.ecoupon_id=b.ecoupon_id AND b.sp_id= @nSpId

				  WHERE b.ecoupon_id IS NULL

			  IF @cEcouponIdChanged IS NOT NULL

				  SET @bCallRedemptionAPI = 1

		  END

		  IF EXISTS (SELECT TOP 1 CM_ID FROM SLS_COUPON_REDEMPTION_INFO_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID

					 AND ISNULL(gv_discount,0)=0 AND ecoupon_id<>'')
			BEGIN
				DECLARE @cEcouponId VARCHAR(50)
				SET @cStep = 510.2
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
				---- MAKE ENTRY OF ECOUPON TITLES IN DISCOUNT TYPE MASTER FOR THE PURPOSE OF IMPACT IN SALES SUMMARY REPORT
				SET @CCMD = N'SELECT TOP 1 @CECOUPONID=ECOUPON_ID FROM '+@CTEMPDETAILTABLE10+' (NOLOCK) '+@CWHERECLAUSE1
				  EXEC SP_EXECUTESQL @CCMD, N'@CECOUPONID VARCHAR(50) OUTPUT', @CECOUPONID OUTPUT

					IF ISNULL(@CECOUPONID,'')<>''
				BEGIN
					SET @cStep = 510.4
					EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


					SET @CCMD = N'INSERT DTM	( DT_CODE, DT_NAME, UPDATE_AC, AC_CODE, LAST_UPDATE, DISCOUNT_PERCENTAGE,FIXED, DTM_TYPE,WIZCLIP_DISCOUNT ) 
								SELECT DISTINCT CAMPAIGN_TITLE_CODE AS DT_CODE,CAMPAIGN_TITLE AS DT_NAME,0 AS UPDATE_AC,
								''0000000000'' AS AC_CODE, GETDATE() AS LAST_UPDATE,0 AS DISCOUNT_PERCENTAGE,1 AS FIXED,
								1 AS DTM_TYPE,1 AS WIZCLIP_DISCOUNT FROM '+@CTEMPDETAILTABLE10+' A(NOLOCK)
								LEFT OUTER JOIN DTM B(NOLOCK) ON A.CAMPAIGN_TITLE_CODE=B.DT_CODE
							   WHERE '+@CWHERECLAUSE+' AND A.CAMPAIGN_TITLE_CODE<>'''' AND B.DT_CODE IS NULL'


				   EXEC SP_EXECUTESQL @CCMD

				   SET @cStep = 512

				   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


				   UPDATE a SET DT_CODE = B.CAMPAIGN_TITLE_CODE

				   FROM SLS_CMM01106_UPLOAD A with (ROWLOCK)
				   JOIN sls_coupon_redemption_info_upload B  (NOLOCK) ON a.sp_id= b.sp_id

				   WHERE b.sp_id= @nSpid AND B.CAMPAIGN_TITLE_CODE<>''


				   DELETE FROM SLS_COUPON_REDEMPTION_INFO_UPLOAD WITH (ROWLOCK) WHERE SP_ID= @NSPID

				   AND (CAMPAIGN_TITLE_CODE= '' OR ecoupon_id = '')
				END

			END
			
			---Have to do this specially because application puts the dt_code returned by Wizcllip API
			--- in case of coupon to be adhusted as PAyment mode & then return error of foreign key if dt_code
			--- Da milano(Ticket #060393 Dated:08-06-2021)
			IF EXISTS (SELECT TOP 1 CM_ID FROM SLS_COUPON_REDEMPTION_INFO_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID
			AND ISNULL(gv_discount,0)=1 AND ecoupon_id<>'')
			BEGIN
				update SLS_CMM01106_UPLOAD SET DT_CODE='0000000' WHERE sp_id = @nSpId

			END

		SELECT @LUPDATEONLY=0,@cUpdatestr=''

		SET @cStep = 513.4
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @nSpId,'',1


		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN
			  @CSOURCEDB = @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB = ''
			, @CDESTTABLE = @CMASTERTABLENAME
			, @CKEYFIELD1 = @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			, @CFILTERCONDITION = @cWhereClause
			, @cUpdatestrPara = @cUpdatestr
			, @LUPDATEONLY = @LUPDATEONLY
			, @bThruUpdatestrPara = 0
			, @LINSERTONLY = @BINSERTONLY
			, @LUPDATEXNS = @BINSERTONLY



			IF @NUPDATEMODE = 2
			BEGIN
				-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
				SET @cStep = 515-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES
		EXEC SP_CHKXNSAVELOG 'SLS_after',@cStep,0,@NSPID,1
				
				EXEC SAVETRAN_DELETE_MISSINGROWS
				@nSpId=@nSpId,
				@cMemoIdCol='cm_id',
				@cMemoId=@cKeyfieldval1,
				@cMainTable='cmd01106',
				@cTemptable='sls_cmd01106_upload',
				@cErrormsg=@cErrormsg OUTPUT

				IF ISNULL(@cErrormsg,'')<>''
					GOTO END_PROC



				SET @cStep = 520


				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


				EXEC SAVETRAN_DELETE_MISSINGROWS
				@nSpId=@nSpId,
				@cMemoIdCol='memo_id',
				@cMemoId=@cKeyfieldval1,
				@cMainTable='paymode_xn_det',
				@cTemptable='sls_paymode_xn_det_upload',
				@cFilterCondition=' AND xn_type=''SLS''',
				@cErrormsg=@cErrormsg OUTPUT

				IF ISNULL(@cErrormsg,'')<>''
					GOTO END_PROC

				SET @cStep = 525
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


				SET @cStep = 530
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1				

				IF EXISTS(SELECT TOP 1 memo_id FROM image_xn_det (NOLOCK) WHERE memo_id= @cKeyfieldval1 AND xn_type = 'SLS')
					DELETE FROM image_xn_det WITH(ROWLOCK) WHERE memo_id = @cKeyfieldval1 AND xn_type = 'SLS'


			END


			SET @cStep = 534
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1		
			SElect @LUPDATEONLY = 0, @cUpdatestr = ''


			EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN
				  @CSOURCEDB = @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME
				, @CDESTDB = ''
				, @CDESTTABLE = @CDETAILTABLENAME
				, @CKEYFIELD1 = 'ROW_ID'
				, @BALWAYSUPDATE = 1
				, @LINSERTONLY = @BINSERTONLY
				, @LUPDATEXNS = @BINSERTONLY
				, @lUpdateonly = @lUpdateonly
				, @CFILTERCONDITION = @CWHERECLAUSE
				, @cUpdatestrPara = @cUpdatestr
				, @bThruUpdatestrPara = 0


			SET @cStep = 540


			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

			SElect @LUPDATEONLY = 0, @cUpdatestr = ''

			SET @cStep = 5430


			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1			
			-- PAYMODE_XN_DET
			EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN
			  @CSOURCEDB = @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
			, @CDESTDB = ''
			, @CDESTTABLE = @CDETAILTABLENAME2
			, @CKEYFIELD1 = 'ROW_ID'
			, @BALWAYSUPDATE = 1
			, @CFILTERCONDITION = @cWhereClause
			, @lUpdateonly = @lUpdateonly
			, @cUpdatestrPara = @cUpdatestr
			, @bThruUpdatestrPara = 0
			, @lInsertOnly = @bInsertOnly
			, @LUPDATEXNS = @BINSERTONLY



			SET @cStep = 550
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			IF EXISTS(SELECT TOP 1 SP_ID FROM SLS_IMAGE_XN_DET_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID)
				EXEC UPDATEMASTERXN_OPT
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME7
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME5 
				, @CKEYFIELD1	= 'MEMO_ID'
				, @LINSERTONLY  = @BINSERTONLY				
				, @BALWAYSUPDATE = 1		
				, @CFILTERCONDITION=@CWHERECLAUSE

			SET @cStep = 550.4
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			IF EXISTS(SELECT TOP 1 SP_ID FROM SLS_GV_MST_REDEMPTION_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID)
			BEGIN
				SET @cStep = 550.6
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

				IF EXISTS(SELECT TOP 1 redemption_cm_id FROM GV_MST_REDEMPTION (NOLOCK) WHERE redemption_cm_id= @cKeyfieldval1)
					DELETE FROM GV_MST_REDEMPTION WITH(ROWLOCK) WHERE redemption_cm_id = @cKeyfieldval1

				SET @cStep = 550.8
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

				EXEC UPDATEMASTERXN_OPT
				  @CSOURCEDB	= ''
				, @CSOURCETABLE = 'SLS_GV_MST_REDEMPTION_UPLOAD'
				, @CDESTDB		= ''
				, @CDESTTABLE	= 'GV_MST_REDEMPTION' 
				, @CKEYFIELD1	= 'redemption_cm_id'
				, @LINSERTONLY  = @BINSERTONLY				
				, @BALWAYSUPDATE = 1		
				, @CFILTERCONDITION=@CWHERECLAUSE
			END


			SET @cStep = 555
			DELETE FROM CMM_FLIGHT WITH(ROWLOCK) WHERE CM_ID = @CKEYFIELDVAL1

		   -- CMM_FLIGHT
		   IF EXISTS(SELECT TOP 1 CM_ID FROM SLS_CMM_FLIGHT_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID)
				EXEC UPDATEMASTERXN_OPT
					  @CSOURCEDB	= @CTEMPDBNAME
					, @CSOURCETABLE = @CTEMPDETAILTABLENAME9
					, @CDESTDB		= ''
					, @CDESTTABLE	= 'CMM_FLIGHT'
					, @CKEYFIELD1	= 'CM_ID'
					, @LINSERTONLY  = 1
					, @BALWAYSUPDATE = 1
					, @CFILTERCONDITION=@CWHERECLAUSE

			SET @cStep = 558
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1



			DELETE FROM CMD_CONS WITH(ROWLOCK) WHERE CM_ID = @CKEYFIELDVAL1

		   -- CMM_FLIGHT
		   IF EXISTS(SELECT TOP 1 CM_ID FROM SLS_CMD_CONS_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID)
				EXEC UPDATEMASTERXN_OPT
					  @CSOURCEDB	= @CTEMPDBNAME
					, @CSOURCETABLE = 'SLS_CMD_CONS_UPLOAD'
					, @CDESTDB		= ''
					, @CDESTTABLE	= 'CMD_CONS'
					, @CKEYFIELD1	= 'CM_ID'
					, @LINSERTONLY  = 1
					, @BALWAYSUPDATE = 1
					, @CFILTERCONDITION=@CWHERECLAUSE

			SET @cStep = 560
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

			IF @nUpdatemode = 2
			BEGIN
				IF EXISTS(SELECT TOP 1 cm_id FROM COUPON_REDEMPTION_INFO WITH (ROWLOCK) WHERE CM_ID= @CKEYFIELDVAL1)
					DELETE FROM COUPON_REDEMPTION_INFO WITH(ROWLOCK) WHERE CM_ID = @CKEYFIELDVAL1

			END
			
			-- COUPON REDEMPTION DETAILS
			IF EXISTS(SELECT TOP 1 CM_ID FROM SLS_COUPON_REDEMPTION_INFO_UPLOAD (NOLOCK) WHERE SP_ID= @NSPID
					   AND ecoupon_id<>'')
			BEGIN
				SET @cStep = 580
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


				EXEC UPDATEMASTERXN_OPT
					  @CSOURCEDB	= @CTEMPDBNAME
					, @CSOURCETABLE = @CTEMPDETAILTABLENAME10
					, @CDESTDB		= ''
					, @CDESTTABLE	= 'COUPON_REDEMPTION_INFO'
					, @CKEYFIELD1	= 'CM_ID'
					, @LINSERTONLY  = 1
					, @BALWAYSUPDATE = 1
					, @CFILTERCONDITION=@CWHERECLAUSE
			END





		   IF @BCALLEDFROMSLSSTOCKNACONVERT = 0 AND @BCALLEDFROMESTIMATE = 0 AND @BTILL_ENABLED = 1
		   BEGIN
				SET @cStep = 590		-- UPDATING PMT TABLE
				EXEC SP_CHKXNSAVELOG 'SLS_after',@cStep,0,@NSPID,1

				--REVERT THE CASH AMOUNT FOR THIS TRANSACTION IN TILL AMOUNT
				SET @cStep = 591
				EXEC SP3S_UPDATESHIFT_AMOUNT
						 @CXN_TYPE='SLS'
						,@CXN_ID=@CKEYFIELDVAL1
						,@NMODE=10
						,@NUPDATEMODE=@NUPDATEMODE
						,@CERRMSGOUT=@CERRORMSG OUTPUT


				IF ISNULL(@CERRORMSG,'')<>''
					GOTO END_PROC
			END

			IF @BCALLEDFROMCASHIERMODULE=1
			BEGIN
				SET @cStep = 592
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

				DECLARE @cOtherCmno VARCHAR(40),@dOtherCmdt datetime, @cPsNo VARCHAR(40)
				SELECT TOP 1 @cOtherCmno=d.cm_no,@dOtherCmdt=d.cm_dt,@cPsNo=b.cm_no
				from rps_det a(NOLOCK) JOIN rps_mst b(NOLOCK) ON a.cm_id=b.cm_id
			  JOIN sls_cmd01106_upload c (NOLOCK) ON c.PACK_SLIP_ID= a.cm_id

			  JOIN cmm01106 d (NOLOCK) ON d.cm_id= b.ref_cm_id

			  WHERE c.sp_id= @nSpId AND b.ref_cm_id<> c.cm_id AND ISNULL(b.ref_cm_id,'')<>''	 

				IF isnull(@cOtherCmno,'')<>''
				BEGIN
					SET @cErrormsg='Bill no. :'+@cOtherCmno+' Dated: '+convert(varchar, @dOtherCmdt,105)+'
									already generated for Pack Slip no. :'+@cPsNo+'.....Cannot Save'
					GOTO END_PROC
				END

				SET @cStep = 594
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
				SELECT TOP 1 @cPsNo=b.cm_no
				from rps_det a(NOLOCK) JOIN rps_mst b(NOLOCK) ON a.cm_id=b.cm_id
			  JOIN sls_cmd01106_upload c (NOLOCK) ON c.PACK_SLIP_ID= a.cm_id

			  WHERE c.sp_id= @nSpId AND b.cancelled= 1


			  IF isnull(@cPsNo,'')<>''
				BEGIN
					SET @cErrormsg='Pack Slip no. :'+@cPsNo+' has been Cancelled by some Other User....Cannot Save'
					GOTO END_PROC
				END

				DECLARE @cModifiedPsLupd DATETIME, @cPSLupd DATETIME

				 SET @cStep = 597
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
				SELECT TOP 1 @cPsNo=b.cm_no
				--,@cModifiedPsLupd=CONVERT(VARCHAR, b.last_update,113),
				--@CpsLupd=CONVERT(VARCHAR, isnull(c.rps_last_update,''),113)
				from rps_det a(NOLOCK) JOIN rps_mst b(NOLOCK) ON a.cm_id=b.cm_id
			  JOIN sls_cmd01106_upload c (NOLOCK) ON c.PACK_SLIP_ID= a.cm_id

			  WHERE c.sp_id= @nSpId AND DATEDIFF(ss, isnull(c.rps_last_update,''),b.last_update)>0 
				AND ISNULL(c.rps_last_update,'')<>''

				IF isnull(@cPsNo,'')<>''
				BEGIN
					--SET @cErrormsg = 'Pack Slip no. :' + @cPsNo + ' has been Modified on :' + @cModifiedPsLupd + '
					-- by some Other User as compared to Current Version :'+@CpsLupd+'....Cannot Save'
					SET @cErrormsg = 'Pack Slip no. :' + @cPsNo + ' has been Modified by some Other User....Cannot Save'
					GOTO END_PROC
				END

				SET @CCMD=N'UPDATE RPS_MST WITH (ROWLOCK) SET REF_CM_ID='''+@CKEYFIELDVAL1+''' FROM '+@CTEMPDETAILTABLE6+' B (NOLOCK)
							WHERE B.pack_slip_ID=RPS_MST.CM_ID'+@CWHERECLAUSE2
				EXEC SP_EXECUTESQL @CCMD

			END

			SET @cStep = 600
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			SELECT TOP 1 @CCMMUSERCODE= USER_CODE
			, @DCMDT= CM_DT
			, @NCMMDISCAMT= DISCOUNT_AMOUNT
			, @BMANUALBILL= ISNULL(MANUAL_BILL, 0)
			FROM SLS_CMM01106_UPLOAD (NOLOCK) WHERE SP_ID= @nSpid



		END

LBLVALIDATE:



		SET @cStep = 685
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1		


		IF EXISTS (SELECT TOP 1 ERRMSG FROM @OUTPUT WHERE ISNULL(ERRMSG,'')<>'')
			SELECT TOP 1 @CERRORMSG=	ERRMSG FROM @OUTPUT WHERE ISNULL(ERRMSG,'')<>''
		ELSE
			DELETE FROM @OUTPUT

	LBLCHECKCUSTOMERLIMIT:
		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		DECLARE @tBal TABLE(CUSTOMER_CODE VARCHAR(20),balance NUMERIC(14,2))
		
		IF EXISTS(SELECT TOP 1 'U' FROM PAYMODE_XN_DET (NOLOCK) WHERE XN_TYPE = 'sls' AND MEMO_ID = @CKEYFIELDVAL1 AND PAYMODE_CODE IN('0000004','0000001','0000002','CMR0001') ) 
		begin

			INSERT @tBal(CUSTOMER_CODE, balance)
			EXEC SP3S_UPDATE_CUSTOMERBALANCES @CKEYFIELDVAL1,'SLS',@CERRORMSG output,0

			select @nBillBalance = balance from @tBal
		end

		PRINT 'CHECK CREDIT LIMIT OF CUSTOMER'

		IF @BCHECKCREDITLIMIT = 1 and @NUPDATEMODE<>3 and isnull(@nBillBalance,0)<>0
		BEGIN
			SET @cStep = 686
		    EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			SELECT @CCUSTOMERCODE = A.CUSTOMER_CODE, @NCREDIT_LIMIT = CUST_CREDIT_LIMIT,
				   @NCUSTBAL = CUST_BAL
			FROM CUSTDYM A(NOLOCK)
			JOIN CMM01106 B(NOLOCK) ON A.CUSTOMER_CODE=B.CUSTOMER_CODE
		   WHERE b.CM_ID= @CKEYFIELDVAL1


		   IF ISNULL(@NCREDIT_LIMIT,0)<>0
			BEGIN

					set @nFinalbalance=@NCUSTBAL+isnull(@nBillBalance,0)

				   IF @NCREDIT_LIMIT<@nFinalbalance and isnull(@nBillBalance,0)<>0
					 BEGIN
						   SET @BCREDITLimitCrossed=1
						   SET @CERRORMSG = 'PARTY CREDIT LIMIT IS BEING VIOLATED LIMIT : ' + ltrim(rtrim(STR(@NCREDIT_LIMIT))) +
						   'Customer Balance :' + ltrim(rtrim(str(@NCUSTBAL))) +
						   'Current Bill Balance :' + ltrim(rtrim(str(@nBillBalance)))

					 GOTO END_PROC

				 END


		END

	END

	IF @NUPDATEMODE=5
      GOTO END_PROC



		SET @cStep = 690
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1		

		INSERT SLS_BO_REF(CM_ID, ORDER_ID)
		SELECT DISTINCT CM_ID,ORDER_ID FROM SLS_cmd01106_UPLOAD A(NOLOCK)
		JOIN SKU_BO B(NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
	   WHERE SP_ID= @NSpid


	   IF @BMANUALBILL = 1

	   BEGIN
			----- INSERT FAILED VALIDATION DUE TO WHICH MANUAL BILL IS BEING CREATED INTO TABLE CMD_MANUALBILL_ERRORS

		   SET @cStep = 695

		   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1		



		   IF OBJECT_ID('TEMPDB..#TMPSLSDISCTAXOPT','U') IS NOT NULL
			   DROP TABLE #TMPSLSDISCTAXOPT 
					 	
 			SELECT A.PRODUCT_CODE,SUB_SECTION_CODE,A.MRP* A.QUANTITY AS MRPVAL, A.DISCOUNT_PERCENTAGE,
 			((A.MRP* A.QUANTITY)-A.NET) AS DISCOUNT_AMOUNT, A.NET,A.ROW_ID AS CMD_ROW_ID,B.USER_CODE,
 			C.SCHEME_NAME AS SLS_TITLE,ISNULL(@CERRORMSG,'') AS ERRMSG, CONVERT(VARCHAR(10), '') AS SCHEME_ID,
			  A.ROW_ID,A.TAX_PERCENTAGE,A.TAX_AMOUNT,A.TAX_METHOD,'0000000000' AS TAX_AC_CODE,'0000000000' AS SALE_AC_CODE,
			  B.DISCOUNT_PERCENTAGE AS BILL_LEVEL_DISCOUNT_PERCENTAGE,B.DISCOUNT_AMOUNT AS CMM_DISCOUNT_AMOUNT,
			A.WEIGHTED_AVG_DISC_PCT,A.WEIGHTED_AVG_DISC_AMT,A.ITEM_ROUND_OFF,B.DISCOUNT_AMOUNT AS BILL_LEVEL_DISCOUNT_AMOUNT,
			A.BASIC_DISCOUNT_PERCENTAGE,A.CARD_DISCOUNT_PERCENTAGE,A.BASIC_DISCOUNT_AMOUNT,A.CARD_DISCOUNT_AMOUNT,
			A.HSN_CODE,GST_PERCENTAGE,IGST_AMOUNT,CGST_AMOUNT,SGST_AMOUNT,
			XN_VALUE_WITHOUT_GST,XN_VALUE_WITH_GST,0 as cess_amount,a.scheme_discount

			INTO #TMPSLSDISCTAXOPT FROM SLS_CMD01106_UPLOAD A (NOLOCK)
			JOIN SLS_CMM01106_UPLOAD B(NOLOCK) ON A.CM_ID=B.CM_ID
		   JOIN SCHEME_SETUP_DET C ON 1=1

		   JOIN SECTIOND D ON 1=1

		   WHERE 1=2


		   SET @CERRORMSG = ''

		   SET @cStep = 700

		   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1





		   EXEC SP3S_VALIDATE_MANUALBILL

		   @NMODE= 1,
		   @CCMID= @CKEYFIELDVAL1,
		   @BCALLEDFROMSAVETRAN= 1,
		   @CERRMSG= @CERRORMSG OUTPUT
	   END


	   SET @cStep = 705





	   EXEC SP3S_ACKNOWLGEDMENT_ONLINE_CN

	   @nSpId= @nSpId,
	   @cLocationId= @cLocationId,
	   @ERRMSG= @CERRORMSG OUTPUT



	   GOTO END_PROC

UPDATEDATE:

	   IF @NUPDATEMODE = 4

	   BEGIN


		   SET @cStep = 710

		   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1					


		   EXEC SP3S_CAPTURE_AUDIT_TRAIL 'SLS', @CMEMOID, @CTEMPMASTERTABLE, @CTEMPDETAILTABLE, @NSPID, @CMACHINENAME, @CWINDOWUSERNAME, @CWIZAPPUSERCODE,4, @CMEMODT

		   DECLARE @DOLDCMDT DATETIME

		   SET @cStep = 720

		   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1					


		   SELECT TOP 1 @DOLDCMDT= CM_DT, @CUSERALIAS= user_alias, @cMemoNoval= cm_no,
		   @CMEMONOPREFIX= LEFT(cm_no, CHARINDEX('-', cm_no)) FROM CMM01106 a (NOLOCK)
		   JOIN users b (NOLOCK) ON a.user_code= b.user_code WHERE CM_ID = @CMEMOID


		   UPDATE CMM01106 WITH (ROWLOCK) SET CM_DT= @CMEMODT, LAST_UPDATE= GETDATE() WHERE CM_ID = @CMEMOID

		   SET @CKEYFIELDVAL1 = @CMEMOID


		   SET @CERRORMSG = ''


		   PRINT 'SLS_AFTERSAVE:'+@CWIZAPPUSERCODE

		   SET @cStep = 730

		   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


		   EXEC VALIDATE_XN_DATA_FREEZE  'SLS', @CWIZAPPUSERCODE, @CMEMOID , @CMEMODT, @CERRORMSG OUTPUT

		   IF @CERRORMSG <> '' 

			   GOTO END_PROC




		   SET @cStep = 735

		   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1					


		   SELECT TOP 1 @cGenerateMonthwiseNo= VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION= 'SLS_GENMEMONO_MONTHWISE'


		   IF ISNULL(@cGenerateMonthwiseNo,'')='1'
				SET @CKEYSTABLE = 'KEYS_CMM'
			ELSE
				SET @CKEYSTABLE='KEYS_CMM_'+LTRIM(RTRIM(@CUSERALIAS))


			IF ISNULL(@BSISLOC,0)=0
			BEGIN
				EXEC SP_VALIDATE_MEMODATE_OPT
				@CXNTYPE = 'SLS',
				@CXNID = @CMEMOID,
				@CERRORMSG = @CERRORMSG OUTPUT

				  IF @CERRORMSG<> ''
					GOTO END_PROC
			END

			SET @cStep = 740
		    EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1					

			SET @cCmd = N'UPDATE '+@CKEYSTABLE+' SET last_cm_dt='''+CONVERT(VARCHAR, @CMEMODT,110)+'''
						WHERE prefix = '''+@CMEMONOPREFIX+''' AND finyear = '''+@cFinyear+'''
						AND lastkeyval = '''+@cMemonoVal+''''
			EXEC SP_EXECUTESQL @cCmd

		END



	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'PROCEDURE SAVETRAN_SLS_AFTERSAVE : STEP- ' + LTRIM(rtrim(@cStep)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD = N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH


END_PROC:
	
	print 'last step of aftersave for sisloc:'+@cStep
	UPDATE CMM01106 WITH(ROWLOCK) SET LAST_UPDATE = GETDATE() WHERE CM_ID = @CKEYFIELDVAL1

	SET @cStep = 742
	EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1	


	IF ISNULL(@CERRORMSG,'')='' AND @NUPDATEMODE NOT IN(3,4) --AND @BCALLEDFROMESTIMATE = 0
	BEGIN


		print 'enter validate after save'
		EXEC VALIDATEXN_SLS_AFTERSAVE @NUPDATEMODE,@NSPID,1,@CKEYFIELDVAL1,@BGSTBILL,@CERRORMSG OUTPUT,0, @CLOCATIONID




		IF ISNULL(@CERRORMSG,'')<>''
		BEGIN
			SET @CERRORMSG=@CERRORMSG+'(FINAL)'
			GOTO END_PROC
		END
	END


	SET @cStep = 744
	EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1	
	
	--changes for payment mismatch


	DECLARE @NETAMOUNT NUMERIC(10,2),@PAYAMT NUMERIC(10,2),
	@BPAYMENTMISMATCH BIT

	SELECT @NETAMOUNT = NET_AMOUNT  FROM CMM01106 A(NOLOCK) WHERE CM_ID = @CKEYFIELDVAL1
	SELECT @PAYAMT = SUM(AMOUNT) FROM PAYMODE_XN_DET(NOLOCK) WHERE MEMO_ID = @CKEYFIELDVAL1 AND XN_TYPE = 'SLS'

	SET @BPAYMENTMISMATCH = 0
	IF ISNULL(@NETAMOUNT,0)<>ISNULL(@PAYAMT,0)
		SET @BPAYMENTMISMATCH = 1
--



	IF @@TRANCOUNT>0
	BEGIN
		SET @cStep=746
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1	
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

		IF @NUPDATEMODE IN(1,2,3,5)
		BEGIN
			DECLARE @cGvMode VARCHAR(2),@bFlag BIT



			IF @bValidateGvThruWizclip = 1 OR @bValidateGvThruHO = 1
			BEGIN
				SET @cStep=748
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1	

			 	DELETE FROM wc_gv_validate with(rowLOCK) WHERE memo_id = @CKEYFIELDVAL1 AND mode IN(4,5)


				INSERT INTO wc_gv_validate(gv_srno, mode, memo_id, customer_code, denomination, memo_no, memo_dt, usage_type, bill_amount, dt_expiry)
				SELECT a.gv_srno, (CASE WHEN @nUpdateMode = 3 THEN 5 ELSE 4 END) as mode,
				@CKEYFIELDVAL1 as memo_id,d.customer_code as mobile,a.amount,c.CM_NO,c.cm_dt,1 as usage_type,c.NET_AMOUNT,'' as dt_expiry
				FROM paymode_xn_det a(NOLOCK)
				JOIN CMM01106 c(NOLOCK) ON c.cm_id=a.memo_id
			   JOIN custdym d (NOLOCK) ON d.customer_code= c.customer_code

			   WHERE a.memo_id= @CKEYFIELDVAL1 AND xn_type = 'SLS' AND paymode_code = 'GVC0001'

		   END
	   END		

		--if @@spid= 124
	--  select 'final subtotal', sum(net) from SLS_cmd01106_UPLOAD where sp_id= @nSpId

   --  select @CERRORMSG, @CCMDOUTPUT, @BNEGSTOCKFOUND, @BCALLEDFROMSLSSTOCKNACONVERT, @BCALLEDFROMESTIMATE, @BSISLOC
	   IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0
		BEGIN


			IF @BCALLEDFROMSLSSTOCKNACONVERT=0 AND @BCALLEDFROMESTIMATE = 0 AND ISNULL(@BSISLOC,0)=0
			BEGIN
				SET @cStep = 780
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

				IF @NUPDATEMODE in(2,5)
			        EXEC SP3S_CAPTURE_AUDIT_TRAIL 'SLS', @CMEMOID,'','', @NSPID, @CMACHINENAME, @CWINDOWUSERNAME, @CWIZAPPUSERCODE,0,'1900-01-01',1

				SET @cStep = 785
				EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
				DECLARE @CEOSSMSGSCHEME VARCHAR(300),@CEOSSMSG VARCHAR(1000),@CMOBILE VARCHAR(15)


				SELECT TOP 1 @CEOSSMSGSCHEME=B.SCHEME_NAME FROM CMD01106 A(NOLOCK)
				JOIN SCHEME_SETUP_DET B(NOLOCK) ON A.SLSDET_ROW_ID=B.ROW_ID
			   WHERE A.CM_ID= @CKEYFIELDVAL1 AND B.PROMOTIONAL_SCHEME_ID= 'SCH0013'


			   IF ISNULL(@CEOSSMSGSCHEME,'')<>''
				BEGIN
					SET @cStep = 787
					EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1
					SELECT @CMOBILE = MOBILE, @CCUSTCODE = A.CUSTOMER_CODE FROM CUSTDYM A(NOLOCK)
					JOIN CMM01106 B(NOLOCK) ON A.CUSTOMER_CODE=B.CUSTOMER_CODE
				   WHERE CM_ID= @CKEYFIELDVAL1


				   IF @CCUSTCODE NOT IN ('','000000000000') AND @CMOBILE<>''				
					BEGIN
					   SET @cStep = 789

					   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

					   SELECT TOP 1 @CEOSSMSG= VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION= 'EOSS_MSG_TEMPLATE'


					   INSERT INTO EOSS_SMS (CM_ID, SMS_DETAILS, MOBILE)
					   SELECT @CKEYFIELDVAL1 AS CM_ID, @CEOSSMSG AS SMS_DETAILS, @CMOBILE

					   SET @cStep = 790

					   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


					   UPDATE CMM01106 WITH (ROWLOCK) SET REMARKS= @CEOSSMSG WHERE CM_ID = @CKEYFIELDVAL1

				   END
			   END



			   UPDATE CMM01106 WITH (ROWLOCK) SET HO_SYNCH_LAST_UPDATE= '', wizclip_bill_synch_last_update= ''  WHERE CM_ID = @CKEYFIELDVAL1

		   END

		   IF @BDIALOGRESULT   = 1

		   BEGIN
			   SET @cStep = 792

			   EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


			   DECLARE @CPRINTPRGFRXTABLE VARCHAR(200),@CREPFILEPATH VARCHAR(500)
				SET @CPRINTPRGFRXTABLE = 'MASTER..[TEMP_PRINTSLS_' + LTRIM(RTRIM(STR(@NLOGINSPID))) + ']'
				SET @CCMD = N'IF OBJECT_ID(''' + @CPRINTPRGFRXTABLE + ''',''U'') IS NOT NULL 
								SELECT @CREPFILEPATH = REP_PATH FROM '+ @CPRINTPRGFRXTABLE
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD ,N'@CREPFILEPATH VARCHAR(500) OUTPUT',@CREPFILEPATH=@CREPFILEPATH OUTPUT
				
				--SELECT @CREPFILEPATH
				IF ISNULL(@CREPFILEPATH,'')<>'' 
				BEGIN
					--SELECT 'CALLED SLS_PRINT_PRG'
					EXEC SPSLS_PRINT_PRG @NLOGINSPID,@CKEYFIELDVAL1,3,@CLOCID,0,@CERRORMSG OUTPUT
				END
			END
		END

		IF @NUPDATEMODE IN(4)
		BEGIN
			IF ISNULL(@cErrormsg,'')=''
				commit
			ELSE
				ROLLBACK
		END
	END

	SET @cStep=793
	EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1						
	EXEC SP3S_DELETEUPLOADTABLES_SLS @nSpId

	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT(ERRMSG, MEMO_ID) VALUES(ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )
	END


	IF  @bValidationGvLocalFailed=0 AND(@bSisLoc= 0 OR @NUPDATEMODE = 3)
	BEGIN
		IF @NUPDATEMODE IN(3) AND @bENABLEWIZCLIP = 1
		BEGIN
			SET @cStep=795
			EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1						
			SELECT TOP 1 @cEcouponId=(CASE WHEN ISNULL(a.ecoupon_id,'')<>'' THEN a.ecoupon_id ELSE b.ecoupon_id END),
			@cCustCode=a.CUSTOMER_CODE FROM cmm01106 a(NOLOCK)
			LEFT JOIN coupon_redemption_info b(NOLOCK) ON a.cm_id=b.cm_id
		   WHERE a.cm_id= @CMEMOID


		   IF ISNULL(@cEcouponId,'')<>'' OR ISNULL(@cCustCode,'') NOT IN('','000000000000')
				SET @bCallRedemptionAPI = 1

		END

		SET @cStep=797
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1						
		SELECT a.*, @BPAYMENTMISMATCH as PAYMENT_MISMATCH, ISNULL(@bValidateGvThruWizclip,0) ValidateGvThruWizclip,
		ISNULL(@bValidateGvThruHO,0) ValidateGvThruHO,ISNULL(@bCallRedemptionAPI,0) as CallRedemptionAPI,isnull(b.cm_no,'') as cm_no,
		isnull(@BCREDITLimitCrossed,0) as CREDITLIMITCROSSED FROM @OUTPUT a
		left outer join cmm01106 b(NOLOCK) ON b.cm_id=a.memo_id
   END

   ELSE
   IF @bCalledFromBulkImport= 1 AND @NUPDATEMODE<>3 

	   INSERT INTO #SAVETRAN_SLS_BULK (errmsg,MEMO_ID)
		SELECT @CERRORMSG, ISNULL(@CKEYFIELDVAL1,'')
	ELSE
	IF @bValidationGvLocalFailed=1
		INSERT #TERROR (ERRMSG)
		SELECT @CERRORMSG

	IF ISNULL(@CERRORMSG,'')='' AND @bSisLoc = 0
	BEGIN

		SET @cStep =800 
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


		UPDATE sls_xnsavelog_summary_UPLOAD WITH(ROWLOCK) SET cm_id = @CKEYFIELDVAL1, aftersave_start_time = @DSTARTTIME, aftersave_end_time = GETDATE()
		WHERE sp_id = @NSPID

		SET @CWHERECLAUSE = ' b.SP_ID='''+LTRIM(RTRIM((@NSPID)))+''''

		SET @cStep = 802
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1


		EXEC UPDATEMASTERXN_OPT
		  @CSOURCEDB	= ''
		, @CSOURCETABLE = 'sls_xnsavelog_summary_upload'
		, @CDESTDB		= ''
		, @CDESTTABLE	= 'sls_xnsavelog_summary'
		, @CKEYFIELD1	= 'CM_ID'
		, @LINSERTONLY  = 1
		, @BALWAYSUPDATE = 1
		, @CFILTERCONDITION=@CWHERECLAUSE

		DELETE FROM sls_xnsavelog_summary_upload WITH(ROWLOCK) WHERE sp_id = @nSpId
	END

	IF @NUPDATEMODE=2	
	BEGIN
		SET @cStep =804
		EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

		SET @COL = 'IF OBJECT_ID(''TEMPDB..[##CMM_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+']'',''U'') IS NOT NULL'+CHAR(13)+' DROP TABLE [##CMM_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+'];'
		EXEC(@COL)
		SET @COL = ''
		SET @COL = 'IF OBJECT_ID(''TEMPDB..[##CMD_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+']'',''U'') IS NOT NULL'+CHAR(13)+' DROP TABLE [##CMD_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+'];'
		PRINT @COL
		EXEC(@COL)

		SET @COL = ''
		SET @COL = 'IF OBJECT_ID(''TEMPDB..[##paymode_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+']'',''U'') IS NOT NULL'+CHAR(13)+' DROP TABLE [##paymode_'+CAST(@NSPID AS VARCHAR(40))+'_'+@CMEMOID+'];'
		PRINT @COL
		EXEC(@COL)
	END
	SET NOCOUNT OFF

	SET @cStep = 805
	EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

	DELETE A  FROM XNTYPE_CHECKSUM_MST A WITH(ROWLOCK)  WHERE SP_ID = @NSPID

	SET @cStep = 807
	EXEC SP_CHKXNSAVELOG 'SLS_after', @cStep,0, @NSPID,1

	EXEC SP3S_SLOWBILL_ALERT @CKEYFIELDVAL1

	IF @NUPDATEMODE IN(1,3)
	BEGIN
		EXEC SP3S_UPDATE_UPLOADED_BILL_DETAILS_THIRDPARTY @cCMID = @CKEYFIELDVAL1, @cERRMSG = '', @bEditMode = 2
	END

END						-- SAVETRAN_SLS_AFTERSAVE
------------------------------------------------------ END OF PROCEDURE SAVETRAN_SLS_AFTERSAVE

 CREATE PROCEDURE SP3S_VALIDATE_GVREDEMPTION_SINGLECHANNEL
(
	@NSPID VARCHAR(40),
	@NMODE INT,	
	@CLOCID CHAR(2)='',
	@bCalledfromSavetran BIT=0
)
--WITH ENCRYPTION
AS
BEGIN


	--INSERT MIRROR_gv_call (sp_id,calledfromsavetran,mode)
	--select @NSPID,@bCalledfromSaveTran,@nMode
		
	---- @NMODE ---- 1. CALLED FROM CASHMEMO PAYMENT WINDOW FOR VALIDATING THE GV & GET THE DENOMINATION ALSO
				---- 2. CALLED FROM CASHMEMO SAVE CLICK TO FINALLY VALIDATE & Acknowledg THE GV'S REDEEMED
				
	DECLARE @CADJBILLNO VARCHAR(20),@DADJBILLDT DATETIME,@CERRORMSG VARCHAR(MAX),@CCURLOCID VARCHAR(5),
			@CHOLOCID VARCHAR(5),@CCMD NVARCHAR(MAX),@CSTEP VARCHAR(10),@CTEMPTABLE VARCHAR(500),
			@CGVSRNOSEARCH VARCHAR(50),@CVALIDATEGVTHRUAPI VARCHAR(5),@CGVSCHEMECODE VARCHAR(10),
			@CGVSRNO VARCHAR(50),@nGvCnt NUMERIC(1,0)
	
	SET @CERRORMSG=''

BEGIN TRY
	
	SET @CSTEP=10
		
	IF ISNULL(@CLOCID,'')=''
	BEGIN
		SET @CERRORMSG =' LOCATION ID CAN NOT BE BLANK  '  
		GOTO END_PROC    
	END

	--- Have to do this silly step because application has bind the denomination column in Redemption window
	 --- and cannot give it to the api in different column as per Anil/Rohit	
	IF @nMode=1  
		UPDATE validate_sls_gvredemption_upload with (rowlock) set gv_adj_amount=denomination
		where sp_id=@nSpId

	SET @CSTEP=20
	UPDATE A WITH (ROWLOCK) SET ERRMSG='INVALID GV NO. ENTERED....CANNOT REDEEM' 
	FROM validate_sls_gvredemption_upload A
	LEFT OUTER JOIN SKU_GV_MST B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
	WHERE sp_id=@nSpId AND B.GV_SRNO IS NULL AND LEFT(a.gv_srno,2)<>'WC'
		
	SET @CSTEP=25
	UPDATE A WITH (ROWLOCK) SET ERRMSG='Gv is marked as Cancelled....CANNOT REDEEM' 
	FROM validate_sls_gvredemption_upload A
	JOIN GV_GEN_DET B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
	JOIN gv_gen_mst c (NOLOCK) ON c.memo_id=b.memo_id
	left JOIN 
	(
	select a.gv_srno from validate_sls_gvredemption_upload a (nolock)
	 join GV_GEN_DET d (NOLOCK) ON A.GV_SRNO=d.GV_SRNO
	 JOIN gv_gen_mst e (NOLOCK) ON e.memo_id=d.memo_id 
	 where  e.cancelled=0 and sp_id=@nSpId 
	) d on d.GV_SRNO=a.GV_SRNO
	 WHERE sp_id=@nSpId AND c.cancelled=1 AND d.gv_srno IS NULL
	 
	SET @CSTEP=30
	UPDATE A SET GV_TYPE=(CASE WHEN B.GV_TYPE IS NULL THEN 1 ELSE b.gv_type END)
	FROM validate_sls_gvredemption_upload A WITH (ROWLOCK)
	LEFT OUTER JOIN SKU_GV_MST B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
	WHERE sp_id=@nSpId

	SET @CSTEP=35
	UPDATE A SET ERRMSG='GV HAS BEEN ADJUSTED IN THE BILL NO.:'+C.CM_NO+' DATED:'+CONVERT(VARCHAR,C.CM_DT,105)
	FROM validate_sls_gvredemption_upload A WITH (ROWLOCK) 
	JOIN PAYMODE_XN_DET B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
	JOIN CMM01106 C (NOLOCK) ON B.MEMO_ID=C.CM_ID
	JOIN sku_gv_mst d (NOLOCK) ON d.gv_srno=a.gv_srno
	WHERE sp_id=@nSpId AND B.XN_TYPE='SLS' AND C.CANCELLED=0 AND C.CM_ID<>ISNULL(a.cm_id,'') AND left(a.gv_srno,2)<>'WC'
	AND ISNULL(d.allow_partial_redemption,0)<>1 AND isnull(errmsg,'')=''
	
	SET @cStep=37
	UPDATE A SET ERRMSG='GV  HAS BEEN ADJUSTED IN THE BILL NO.:'+B.CM_NO+' DATED:'+CONVERT(VARCHAR,B.redeemed_on,105)
	+'....CANNOT REDEEM'
	FROM validate_sls_gvredemption_upload A WITH (ROWLOCK) 
	JOIN GV_MST_REDEMPTION B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
	JOIN sku_gv_mst c (NOLOCK) ON c.gv_srno=a.GV_SRNO
	WHERE SP_ID=@nSpId AND ISNULL(B.REDEMPTION_CM_ID,'')<>ISNULL(a.cm_id,'') AND ISNULL(B.REDEMPTION_CM_ID,'')<>''
	AND ISNULL(c.allow_partial_redemption,0)<>1 AND isnull(errmsg,'')=''		
	

	SET @cStep=38
	UPDATE A SET ERRMSG='GV adjusted amount cannot be more than '+
	(CASE WHEN ISNULL(c.gv_type,1) IN (0,1)  THEN LTRIM(RTRIM(STR(ISNULL(d.gv_issue_amount,0)-ISNULL(b.gv_adj_amount,0))))
	      ELSE  LTRIM(RTRIM(STR(c.denomination))) END)+'....CANNOT REDEEM'
	FROM validate_sls_gvredemption_upload A WITH (ROWLOCK) 
	LEFT JOIN 
	(SELECT a.GV_SRNO,SUM(gv_amount) gv_adj_amount FROM   GV_MST_REDEMPTION a (NOLOCK)
	 JOIN validate_sls_gvredemption_upload  B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
	 JOIN sku_gv_mst c (NOLOCK) ON c.gv_srno=b.gv_srno
	 WHERE sp_id=@nSpId AND ISNULL(c.allow_partial_redemption,0)=1
	 AND ISNULL(a.REDEMPTION_CM_ID,'')<>isnull(b.cm_id,'')
	 GROUP BY a.gv_srno) b ON a.GV_SRNO=b.gv_srno
	 JOIN sku_gv_mst c (NOLOCK) ON c.gv_srno=a.gv_srno
	 LEFT JOIN 
	 (SELECT a.gv_srno,SUM(a.denomination) gv_issue_amount FROM arc_gvsale_details a (NOLOCK)
	  JOIN arc01106 b (NOLOCK) ON b.adv_rec_id=a.adv_rec_id
	  JOIN validate_sls_gvredemption_upload c (NOLOCK) ON c.GV_SRNO=a.gv_srno
	  WHERE sp_id=@nSpid AND cancelled=0
	  GROUP BY a.gv_srno) d ON d.gv_srno=a.GV_SRNO
 	 
	WHERE SP_ID=@nSpId AND isnull(errmsg,'')=''	AND ISNULL(c.allow_partial_redemption,0)=1 AND 
	((ISNULL(c.gv_type,1) IN (0,1) AND isnull(a.gv_adj_amount,0)>(ISNULL(d.gv_issue_amount,0)-ISNULL(b.gv_adj_amount,0))) OR 
	 (ISNULL(c.gv_type,1)=2 AND a.gv_adj_amount>c.denomination))
	
	
	SET @CSTEP=40
	IF EXISTS (SELECT TOP 1  GV_SRNO FROM validate_sls_gvredemption_upload (NOLOCK)
				WHERE sp_id=@nSpId AND  GV_TYPE=1)
	BEGIN
		SET @CSTEP=42
		UPDATE A  SET GV_SOLD=1,sold_TO_customer_code=c.customer_code,redemption_usage_type=c.gv_usage_type  FROM validate_sls_gvredemption_upload A WITH (ROWLOCK)
		JOIN ARC_GVSALE_DETAILS B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
		JOIN ARC01106 C (NOLOCK) ON B.ADV_REC_ID=C.ADV_REC_ID
		JOIN sku_gv_mst d (NOLOCK) ON d.gv_srno=a.gv_srno
		WHERE sp_id=@nSpId AND C.CANCELLED=0 AND D.gv_type=1
		
		--SET @CSTEP=44
		--UPDATE A  SET GV_SOLD=1 FROM validate_sls_gvredemption_upload A WITH (ROWLOCK)
		--JOIN gvsale_pos_validate B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
		--WHERE sp_id=@nSpId AND gv_type=1 AND isnull(gv_sold,0)=0
	END
		
	SET @CSTEP=50	
	UPDATE validate_sls_gvredemption_upload WITH (ROWLOCK)
	SET ERRMSG='GV IS NOT SOLD TO ANY CUSTOMER ....CANNOT REDEEM'
	WHERE sp_id=@nSpId AND gv_type=1 AND isnull(gv_sold,0)=0 AND LEFT(gv_srno,2)<>'WC'
	AND isnull(errmsg,'')=''
	

	IF @nMode=1
	BEGIN	
		SET @CSTEP=55
		UPDATE a WITH (ROWLOCK) SET ERRMSG='WRONG COMBINATION OF GV NO. & SCRATCH NO. ENTERED....CANNOT REDEEM'
		FROM validate_sls_gvredemption_upload a
		JOIN GV_gen_det B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
		JOIN gv_gen_mst d (NOLOCK) ON d.memo_id=b.memo_id
		JOIN  sku_gv_mst c (NOLOCK) ON c.gv_srno=a.GV_SRNO
		WHERE sp_id=@nSpId AND ISNULL(A.GV_SCRATCH_NO,'')<>B.GV_SCRATCH_NO	 AND LEFT(a.gv_srno,2)<>'WC'
		AND isnull(errmsg,'')='' AND  (b.gv_scratch_no<>'' OR c.gv_type=1) AND d.cancelled=0

		SET @CSTEP=60
		
		UPDATE validate_sls_gvredemption_upload WITH (ROWLOCK) SET ERRMSG='Invalid Customer details given for Redemption of GV:'+ISNULL(sold_to_customer_code,'')
		WHERE sp_id=@nSpId AND gv_sold=1 AND ((redemption_usage_type IN (0,1) AND ISNULL(sold_to_customer_code,'')<>ISNULL(redemption_customer_code,''))
		OR ISNULL(redemption_customer_code,'000000000000') IN ('','000000000000'))

		--sold_TO_customer_code
	END				

	SET @CSTEP=65
	UPDATE a WITH (ROWLOCK) SET ERRMSG='GV IS EXPIRED ON DATE :'+CONVERT(VARCHAR,B.DT_EXPIRY,105)+'....CANNOT REDEEM'
	FROM validate_sls_gvredemption_upload a 
	JOIN SKU_GV_MST B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
	WHERE sp_id=@nSpId AND B.DT_EXPIRY<CONVERT(DATE,GETDATE())	 AND LEFT(a.gv_srno,2)<>'WC' 
	AND isnull(errmsg,'')='' AND ISNULL(b.dt_expiry,'')<>''


	
	IF @nMode=1
	BEGIN
		SET @CSTEP=70
		UPDATE a WITH (ROWLOCK) SET gv_adj_amount=(CASE WHEN c.gv_type=1 THEN
		ISNULL(d.gv_issue_amount,0)-ISNULL(b.gv_adj_amount,0) ELSE c.denomination END)
		FROM validate_sls_gvredemption_upload A
		LEFT JOIN 
		(SELECT a.GV_SRNO,SUM(gv_amount) gv_adj_amount FROM   GV_MST_REDEMPTION a (NOLOCK)
		 JOIN validate_sls_gvredemption_upload  B (NOLOCK) ON A.GV_SRNO=B.GV_SRNO
		 JOIN sku_gv_mst c (NOLOCK) ON c.gv_srno=b.gv_srno
		 WHERE sp_id=@nSpId AND ISNULL(c.allow_partial_redemption,0)=1
		 AND ISNULL(a.REDEMPTION_CM_ID,'')<>isnull(b.cm_id,'')
		 GROUP BY a.gv_srno) b ON a.GV_SRNO=b.gv_srno
		 JOIN sku_gv_mst c (NOLOCK) ON c.gv_srno=a.gv_srno
		 LEFT JOIN 
		 (SELECT a.gv_srno,SUM(a.denomination) gv_issue_amount FROM arc_gvsale_details a (NOLOCK)
		  JOIN arc01106 b (NOLOCK) ON b.adv_rec_id=a.adv_rec_id
		  JOIN validate_sls_gvredemption_upload c (NOLOCK) ON c.GV_SRNO=a.gv_srno
		  WHERE sp_id=@nSpid AND cancelled=0
		  GROUP BY a.gv_srno) d ON d.gv_srno=a.GV_SRNO
		WHERE sp_id=@nSpId AND LEFT(a.gv_srno,2)<>'WC' 
		AND (ISNULL(a.gv_adj_amount,0)=0 OR ISNULL(c.allow_partial_redemption,0)=0)

		DECLARE @nTotGvAdjAmt NUMERIC(5,0),@nBillamt numeric(10,2)

		SET @CSTEP=75
		SELECT @nTotGvAdjAmt=sum(isnull(gv_adj_amount,0)) FROM validate_sls_gvredemption_upload (NOLOCK)
		WHERE sp_id=@nSpId

		SELECT @nBillamt=isnull(bill_amount,0) from  validate_sls_gvredemption_upload (NOLOCK)
		WHERE sp_id=@nSpId

		--select @nTotGvAdjAmt,@nBillamt
		IF @nTotGvAdjAmt>@nBillamt
		BEGIN
			SET @CSTEP=80
			SELECT top 1 @CGVSRNO=gv_srno FROM validate_sls_gvredemption_upload (NOLOCK)
			WHERE sp_id=@nSpid AND ISNULL(gv_adj_amount,0)>(@nTotGvAdjAmt-@nBillamt)
			AND LEFT(gv_srno,2)<>'WC'

			SET @CSTEP=83
			UPDATE a WITH (ROWLOCK) SET gv_adj_amount=gv_adj_amount-(@nTotGvAdjAmt-@nBillamt)
			FROM validate_sls_gvredemption_upload A
			WHERE sp_id=@nSpId AND gv_srno=@CGVSRNO

		END

		SET @CSTEP=86
		UPDATE validate_sls_gvredemption_upload WITH (ROWLOCK) SET denomination=gv_adj_amount
		WHERE sp_id=@nSpId

	END
		
LBLUPDATEREDEEMINFO:
	IF @bCalledfromSavetran=0
		BEGIN TRAN
	
	IF @nMode=2 
	BEGIN

		IF NOT EXISTS (SELECT TOP 1 gv_srno FROM validate_sls_gvredemption_upload (NOLOCK)
					   WHERE sp_id=@nSpId AND isnull(errmsg,'')<>'')
		BEGIN
			SET @CSTEP=90
			
			IF @bCalledfromSavetran=0
				INSERT GV_MST_REDEMPTION ( GV_SRNO, REDEEMED_AT_DEPT_ID, REDEEMED_ON, REDEMPTION_CM_ID,gv_amount,gv_scratch_no ) 
				SELECT A.GV_SRNO, @CLOCID AS REDEEMED_AT_DEPT_ID,GETDATE() AS REDEEMED_ON,
				a.cm_id AS REDEMPTION_CM_ID,a.denomination,a.gv_scratch_no FROM validate_sls_gvredemption_upload A
				WHERE a.sp_id=@nSpId AND left(a.gv_srno,2)<>'WC'
			ELSE
				INSERT SLS_gv_mst_redemption_UPLOAD (SP_ID, GV_SRNO, REDEEMED_AT_DEPT_ID, REDEEMED_ON, REDEMPTION_CM_ID,gv_amount,gv_scratch_no ) 
				SELECT A.SP_ID, A.GV_SRNO, @CLOCID AS REDEEMED_AT_DEPT_ID,GETDATE() AS REDEEMED_ON,
				a.cm_id AS REDEMPTION_CM_ID,a.denomination,a.gv_scratch_no FROM validate_sls_gvredemption_upload A
				WHERE a.sp_id=@nSpId AND left(a.gv_srno,2)<>'WC'

		END
	END

END TRY

BEGIN CATCH
	SET @CERRORMSG = 'PROCEDURE SP3S_VALIDATE_GVREDEMPTION_SINGLECHANNEL STEP- ' + @CSTEP + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
	PRINT 'ERROR IN CATCH BLOCK:'+@CERRORMSG
	GOTO END_PROC
END CATCH

END_PROC:
	
	IF @bCalledfromSavetran=0
	BEGIN
		IF @@TRANCOUNT>0
		BEGIN
			IF ISNULL(@CERRORMSG,'')=''
				COMMIT
			ELSE
				ROLLBACK	
		END
	END
	
	UPDATE validate_sls_gvredemption_upload WITH (ROWLOCK) SET ERRMSG=ISNULL(@CERRORMSG,'') 
	WHERE sp_id=@nSpId AND ISNULL(ERRMSG,'')=''
	

LAST:	
	IF @bCalledfromSavetran=0
	BEGIN
		SELECT a.*,'' scheme_id
		FROM validate_sls_gvredemption_upload	a (NOLOCK)
		LEFT OUTER JOIN sku_gv_mst b (NOLOCK) ON a.gv_srno=b.gv_srno
		WHERE sp_id=@nSpId
	END


	DELETE A FROM validate_sls_gvredemption_upload	a WITH (ROWLOCK)
	WHERE SP_ID=@nSpid
END
--********************************* END OF PROCEDURE SP3S_VALIDATE_GVREDEMPTION_SINGLECHANNEL

CREATE PROCEDURE SP3S_GETENINVOICE_MEMOPREFIX 
@cXnType VARCHAR(20),
@cPartyGstNo VARCHAR(50),
@cSourceLocId VARCHAR(50),
@cFinyear VARCHAR(10),
@cInputMemoPrefix VARCHAR(25),
@nSpId VARCHAR(40)='',
@cErrormsg VARCHAR(MAX) OUTPUT,
@cOutputMemoPrefix VARCHAR(25) OUTPUT
AS
BEGIN
	DECLARE @bEnableEInvoice BIT,@NPARTYTYPE NUMERIC(1,0),@cPartyCode VARCHAR(15),@bDonotPrefixFinyear BIT,
			@cStep VARCHAR(4),@cUserAlias VARCHAR(5),@cKeysTable VARCHAR(20),@cCmd NVARCHAR(MAX),
			@clastkeyval VARCHAR(20)

BEGIN TRY
	SET @cStep='10'
	SET @cErrormsg=''
	
	SET @bDonotPrefixFinyear=0
	SET @cOutputMemoPrefix=@cInputMemoPrefix
	
	SET @cStep='20'
	IF @cXnType NOT IN ('WSL_GRP','WSL','GRP_WSR','WSR_GRP','PRT_GRP','PRT','WSR','SLS','FDN','FCN') OR @cFinYear<'01122'
		RETURN
	
	SELECT @bEnableEInvoice= ISNULL(enable_einvoice,0)	FROM location (NOLOCK) WHERE dept_id=@cSourceLocId
	--- Changes done as per WizTickit#0523-00026
	IF @cXnType='SLS' 
	BEGIN
		IF (@bEnableEInvoice=1 AND ISNULL(@cPartyGstNo,'')='') OR @bEnableEInvoice=0
			SELECT @bEnableEInvoice=ISNULL(ENFORCE_YEAR_CODE_RETAIL_SALE,0) 
			FROM location (NOLOCK) WHERE dept_id=@cSourceLocId
	END

	IF ISNULL(@bEnableEInvoice,0)=0
		RETURN

	IF @cXntype='SLS'
	BEGIN
	
		SET @cStep='32'
		SET @CKEYSTABLE='KEYS_CMM_'+LTRIM(RTRIM(@CUSERALIAS))

	END		

	
	SET @cStep='60'
	IF  @bDonotPrefixFinyear=0 
	BEGIN
		SET @cOutputMemoPrefix=@cInputMemoPrefix+RIGHT(@cFinyear,2)

		IF @cXntype='SLS'
		BEGIN
			SET @cCmd=N'SELECT @clastkeyval=lastkeyval FROM  '+@cKeysTable+' WHERE prefix='''+@cOutputMemoPrefix+''''
			EXEC SP_EXECUTESQL @cCmd,N'@clastkeyval VARCHAR(10) OUTPUT',@clastkeyval OUTPUT
			IF RIGHT(@clastkeyval,5)='99999'
				SET @cErrormsg='Maximum bills generated in this series ...Either change User alias or Create Bill in other User'
		END
	END
	GOTO END_PROC
END TRY

BEGIN CATCH
	SET @cErrormsg='Error in Procedure SP3S_GETENINVOICE_MEMOPREFIX at Step#'+@cStep+' '+ERROR_MESSAGE()
	GOTO END_PROC
END CATCH

END_PROC:

END
 

CREATE PROCEDURE SP3S_CHECK_PREVMEMO
@CFINYEAR VARCHAR(5),
@CMEMONO VARCHAR(50),
@CERRORMSG VARCHAR(MAX) OUTPUT
AS
BEGIN

	PRINT 'CHECK SERIES-1:'+isnull(@cMemoNo,'null memo no')
	DECLARE @CFIRSTMEMONO VARCHAR(20),@CMEMOPREFIX VARCHAR(10),@NLENVALUE NUMERIC(4,0),@CMEMONOLEN VARCHAR(4),
	@NMEMONOLEN NUMERIC(2,0),@NPREVMEMONO NUMERIC(12,0),@CPREVMEMONO VARCHAR(15),@CPREVMEMONOSEARCH VARCHAR(15)
	
	--SELECT @CMEMONO AS CMEMONOVAL
	SET @CERRORMSG=''

	SELECT TOP 1 @CMEMONOLEN=VALUE FROM CONFIG WHERE CONFIG_OPTION='SLS_MEMO_LEN'
	
	IF ISNULL(@CMEMONOLEN,'')<>''
		SET @NMEMONOLEN=CONVERT(INT,@CMEMONOLEN)
	ELSE
		SET @NMEMONOLEN=10

	IF @cFinyear>='01121'
		set @nMemonolen=12
		
	PRINT 'CHECK SERIES-2'	
	IF CHARINDEX('-',@CMEMONO,1)=0
       SET @CMEMOPREFIX=LEFT(@CMEMONO,2)
    ELSE   					   
	   SET @CMEMOPREFIX=LEFT(@CMEMONO,CHARINDEX('-',@CMEMONO,1))
	
	PRINT 'CHECK SERIES-2.2'	
	SET @NLENVALUE=@NMEMONOLEN-LEN(@CMEMOPREFIX)

	
	PRINT 'CHECK SERIES-2.5:'+@CMEMOPREFIX+':'+@CMEMONO	   
	SET @NPREVMEMONO=CONVERT(NUMERIC(12,0),REPLACE(@CMEMONO,@CMEMOPREFIX,''))
	
	PRINT 'CHECK SERIES-3'

	
	--06 JUN 2017
	--AND EXISTS(SELECT TOP 1 * FROM CMM01106(NOLOCK) WHERE LEFT(CM_ID,2)=@CLOCID)
	--06 JUN 2017		
	IF @NPREVMEMONO>1
	BEGIN
		SET @NPREVMEMONO=@NPREVMEMONO-1

		SELECT @CFIRSTMEMONO=MIN(CM_NO) 
		FROM CMM01106 A (NOLOCK)
		JOIN CMD01106 B (NOLOCK) ON A.CM_ID=B.CM_ID 
		WHERE LEFT(A.CM_ID,2)=LEFT(@CMEMONO,2)
		AND A.FIN_YEAR=@CFINYEAR AND LEFT(@CMEMONO,LEN(@CMEMOPREFIX))=@CMEMOPREFIX 
		AND LEN(CM_NO)=LEN(@CMEMONO)
		AND LEFT(A.CM_NO,len(@CMEMOPREFIX))=LEFT(@CMEMONO,LEN(@CMEMOPREFIX))
		
	
		SET @CPREVMEMONO=@CMEMOPREFIX+REPLICATE('0',@NLENVALUE-LEN(LTRIM(RTRIM(STR(@NPREVMEMONO)))))+LTRIM(RTRIM(STR(@NPREVMEMONO)))
        
		
		DECLARE @bCheckedOther BIT
		set @bCheckedOther=0

		DECLARE @cOldPrev VARCHAR(50)
lblChkAgain:		
		SET @CPREVMEMONOSEARCH=''
		
		
		PRINT 'CHECK SERIES-5'
		SELECT TOP 1 @CPREVMEMONOSEARCH=CM_NO 
		FROM CMM01106 WITH (INDEX(UNQ_CMM01106_CM_NO),NOLOCK) WHERE CM_NO=@CPREVMEMONO AND FIN_YEAR=@CFINYEAR

		IF @cOldPrev IS NULL
			SET @cOldPrev=@CPREVMEMONO
			
		IF ISNULL(@CPREVMEMONOSEARCH,'')='' AND @CMEMONO<>ISNULL(@CFIRSTMEMONO,'') AND ISNULL(@CFIRSTMEMONO,'')<>''
		BEGIN
			
			IF @NMEMONOLEN=12 AND @bCheckedOther=0
			BEGIN
				SELECT @CPREVMEMONO=REPLACE(@cPrevmemono,'-00','-'),@CERRORMSG='',@bCheckedOther=1
				GOTO lblChkAgain
			END
		
			PRINT 'CHECK SERIES-6'
			SET @CERRORMSG='(S)PREVIOUS MEMO NO. :'+@cOldPrev+' Fin Year:('+@CFINYEAR+') NOT FOUND...CANNOT SAVE'
			
		END	
	END
END
CREATE PROCEDURE SP_VALIDATE_MEMODATE_SLS
@CXNTYPE VARCHAR(10),
@nSpId VARCHAR(40)='',
@cKeysTable VARCHAR(100)='',
@CERRORMSG VARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CMASTERTABLENAME VARCHAR(200),@CMAXMEMONO VARCHAR(50),@DMAXMEMODATE DATETIME,@DMINMEMODATE DATETIME,@CCURMEMONO VARCHAR(50)
				   ,@CCMD NVARCHAR(MAX),@CKEYFIELDCOL VARCHAR(100),@CKEYFIELDCOL2 VARCHAR(100),@CKEYDATECOL VARCHAR(50)
				   ,@DMEMODT DATETIME,@NMEMOPREFIXLEN INT,@CMINCMNO VARCHAR(15),@cMemonoCol VARCHAR(20)
				   ,@CFINYEAR VARCHAR(10),@nCurMemoNO NUMERIC(5,0),@nNextMemoNo NUMERIC(5,0),@CNEXTMEMONO VARCHAR(50)
				   ,@NMINCMNO INT,@CDEPTID CHAR(2),@CWHERECLAUSE VARCHAR(MAX),@CMEMOPREFIX VARCHAR(10),@cMemoDtCol VARCHAR(20)
				   ,@CDONOTENFORCEDAYCLOSE VARCHAR(2),@DMAXMEMODT DATETIME,@cMemonoPrefix VARCHAR(25)
				   ,@cMemoIdCol VARCHAR(20),@cStep VARCHAR(20),@nRightChars NUMERIC(4,0)

BEGIN TRY	
	
	SET @cStep='680.10'				 
	EXEC SP_CHKXNSAVELOG 'SLS',@cStep,0,@nSpId,1

	SET @CERRORMSG=''
	
	SET @cStep='680.20'	
	EXEC SP_CHKXNSAVELOG 'SLS',@cStep,0,@nSpId,1
		
	SET @CMASTERTABLENAME='sls_cmm01106_upload'
	


	SET @cStep='680.30'
		EXEC SP_CHKXNSAVELOG 'SLS',@cStep,0,@nSpId,1
	SET @cMemoDtCol='cm_dt'
	
	SET @cStep='680.40'
	SET @cMemoNoCol='cm_no' 
	
	SET @cStep='680.50'
	SET @cMemoIdCol='sp_id'


	SET @cStep='680.60'
	EXEC SP_CHKXNSAVELOG 'SLS',@cStep,0,@nSpId,1

	SET @cCmd=N'SELECT @DMEMODT='+@cMemoDtCol+',@CCURMEMONO=ltrim(rtrim('+@cMemonoCol+')) FROM '+@CMASTERTABLENAME+' (NOLOCK) 
				WHERE '+@cMemoIdCol+'='''+@nSpId+''''
	PRINT @cCmd	
	EXEC SP_EXECUTESQL @cCmd,N'@DMEMODT DATETIME OUTPUT,@CCURMEMONO VARCHAR(50) OUTPUT',
	@DMEMODT OUTPUT,@CCURMEMONO OUTPUT

	SET @cStep='680.65'
	EXEC SP_CHKXNSAVELOG 'SLS',@cStep,0,@nSpId,1
	SELECT @CFINYEAR='01'+DBO.FN_GETFINYEAR(@DMemoDt)

	SET @cCmd=N'SELECT @NMEMOPREFIXLEN=CHARINDEX(''-'','+@cMemonoCol+'),@cMemonoPrefix=LEFT('+@cMemonoCol+',CHARINDEX(''-'','+@cMemonoCol+'))
				FROM  '+@CMASTERTABLENAME+' (NOLOCK) WHERE '+@cMemoIdCol+'='''+@nSpId+''''
	PRINT @cCmd
	EXEC SP_EXECUTESQL @cCmd,N'@NMEMOPREFIXLEN NUMERIC(2,0) OUTPUT,@cMemonoPrefix VARCHAR(25) OUTPUT',
	@NMEMOPREFIXLEN OUTPUT,@cMemonoPrefix OUTPUT

	SET @cStep='680.70'
	EXEC SP_CHKXNSAVELOG 'SLS',@cStep,0,@nSpId,1

	SET @CCMD=N'SELECT @DMAXMEMODATE=last_cm_dt FROM '+@cKeysTable+' 
	WHERE prefix='''+@cMemonoPrefix+''' AND FINYEAR='''+@CFINYEAR+''''
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD,N'@DMAXMEMODATE DATETIME OUTPUT',@DMAXMEMODATE OUTPUT
			
	IF @DMEMODT<@DMAXMEMODATE
	BEGIN
		SET @CERRORMSG='CURRENT MEMO DATE CANNOT BE LESS THAN - '+CONVERT(VARCHAR,@DMAXMEMODATE,105)
		GOTO END_PROC
	END	

	GOTO END_PROC
END TRY

BEGIN CATCH
	SET @CERRORMSG='Error in Procedure SP_VALIDATE_MEMODATE_SLS at Step#'+@cStep+' '+ERROR_MESSAGE()
	GOTO END_PROC
END CATCH
END_PROC:

END
-----END OF PROCEDURE SP_VALIDATE_MEMODATE_SLS
 */
